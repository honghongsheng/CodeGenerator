/**
  File:
  Note : This file is generated by codegenerator.
  Author: JanyHong(janyhong@yeahka.com)
  Version: v1.0.0
*/
#ifndef DBINTERFACE_CPP_DBAGENT_STRUCT_H_
#define DBINTERFACE_CPP_DBAGENT_STRUCT_H_
#include <string>
#include <map>
#include <vector>
#include <list>
#include <json/json.h>


namespace db_agent_api
{
/**
 * @Merchant
 */
struct Merchant {
    bool bValid;
    string strMerchantId;
    string strUnionPayMerchantId;
    string strMerchantName;
    string strAgentId;
    string strTopAgentId;
    string strMccCode;
    string strRealMccCode;
    string strApplicant;
    string strBankArea;
    string strBankAccount;
    string strBankCity;
    string strbankHolder;
    string strProvince;
    string strCity;
    string strCreateTime;
    string strStartTimeLimit;
    string strEndTimeLimit;
    string strIdCard;
    string strLatitude;
    string strLongitude;
    string strUnionpayCode;
    string strChannelMerchantId;
    string strMobile;
    string strUserName;
    string strMerchantKey;
    string strBankName;
    int nSpId;
    int nBankAccountType;
    int nMiaodaoActivity;
    int nChannelId;
    int nMerchantFlag;
    int nPosLevel;
    int nPreauthLevel;
    int nPreAuthorizationFlag;
    int nQuickLevel;
    int nUnionScanLevel;
    int nWxLevel;
    int nState;
    int nBitFlag;
    int nMerchantType;
    int nPinfreeState;
    int nRegisterStatus;
    int nPosRefundFlag;
    int nCategory_id;
    int nIsdel;
    int nStatus;
    int nPinfreeLimit;
    int nAlipaySingleMaxAmount;
    int nAlipayOrdermaxAmount;
    int nCreditMouthMaxAmount;
    int nCreditOrderMaxAmount;
    int nCreditSingleMaxAmount;
    int nDebitMouthMaxAmount;
    int nDebitOrderMaxAmount;
    int nDebitSingleMaxAmount;
    int nMaxCommissionOneTransaction;
    int nCommission;
    int nCommissionDudect;
    int nCommissionByWeixin;
    int nIsBackUpCommission;
    int nBackUpCommission;
    int nBackUpMaxCommissionOneTransaction;
    int nSaasMultiAmountWarnVolume;
    int nSettlementTimeFlag;
    int nActiveDays;

    Merchant();
    Merchant(const Merchant& right);
    Merchant& operator=(const Merchant& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantCommission
 */
struct MerchantCommission {
    bool bValid;
    string strMerchantId;
    string strCreateTime;
    int nPreferentialType;
    int nT1DebitCardCommission;
    int nT1DebitCardMaxFee;
    int nT1CreditCardCommission;
    int nT1OverseasCardCommission;
    int nT0DebitCardCommission;
    int nT0CreditCardCommission;
    int nT0OverseasCardCommission;
    int nT0CommissionFixed;

    MerchantCommission();
    MerchantCommission(const MerchantCommission& right);
    MerchantCommission& operator=(const MerchantCommission& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantCommissionByPlanId
 */
struct MerchantCommissionByPlanId {
    bool bValid;
    int nPlanId;
    int nRateByMillion;
    int nMaxFeeByMillion;

    MerchantCommissionByPlanId();
    MerchantCommissionByPlanId(const MerchantCommissionByPlanId& right);
    MerchantCommissionByPlanId& operator=(const MerchantCommissionByPlanId& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Agent
 */
struct Agent {
    bool bValid;
    string strAgentId;
    string strAgentName;
    string strParentId;
    string strThirdPartyPublicKey;
    int nproperty;
    int nAgentType;
    int nAgentClass;
    int nStatus;
    int nProfitRuleType;
    string strCreateTime;

    Agent();
    Agent(const Agent& right);
    Agent& operator=(const Agent& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @AgentCommission
 */
struct AgentCommission {
    bool bValid;
    string strAgentId;
    string strStartDate;
    string strUpdateTime;
    int nPreferentialType;
    int nT1DebitCommissionBymillion;
    int nT1DebitMaxFeeBymillion;
    int nT1CreditCommissionBymillion;
    int nT1OverseasCommissionBymillion;
    int nT0DebitCommissionBymillion;
    int nT0CreditCommissionBymillion;
    int nT0OverseasCommissionBymillion;
    int nT0DebitBlendCommissionBymillion;
    int nT0CreditBlendCommissionBymillion;
    int nT0OverseasBlendCommissionBymillion;

    AgentCommission();
    AgentCommission(const AgentCommission& right);
    AgentCommission& operator=(const AgentCommission& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PinpadCheckin
 */
struct PinpadCheckin {
    string strPinpadId;
    string strTakByLmk;
    string strTakByTmk;
    string strCheckInTime;

    PinpadCheckin();
    PinpadCheckin(const PinpadCheckin& right);
    PinpadCheckin& operator=(const PinpadCheckin& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinpad_info
 */
struct pinpad_info {
    bool bValid;
    int nHasEncryptor;
    int nState;
    string strPinpadId;
    string strMerchantId;
    string strSerialNum;
    string strTTK;
    string strTmkByLmk;
    string strTpkByTmk;
    string strTpkByLmk;
    string strPinpadUuid;

    pinpad_info();
    pinpad_info(const pinpad_info& right);
    pinpad_info& operator=(const pinpad_info& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinpad_uuid_info
 */
struct pinpad_uuid_info {
    bool bValid;
    int nStatus;
    int nMaxUnbindTimes;
    int nEnable;
    int nRepairCounts;
    int nLoadTmkAllowNum;
    string strPinpadUuid;
    string strPinpadId;
    string strDeviceId;
    string strCreateTime;
    string strStartUsingTime;
    string strStartUsingDay;
    string strLastRepairTime;
    string strSn;
    string strIndustryName;
    string strIndustryModel;
    string strPinpadCreateTime;
    string strPinpadCommuication;
    string strPinpadOrganNo;
    string strPosType;
    string strIndustryCode;
    string strStoreTime;
    string strDeliverTime;
    string strLeshuaModel;
    string strAuthCode;

    pinpad_uuid_info();
    pinpad_uuid_info(const pinpad_uuid_info& right);
    pinpad_uuid_info& operator=(const pinpad_uuid_info& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Pinpad
 */
struct Pinpad {
    db_agent_api::pinpad_info pinpad;
    db_agent_api::pinpad_uuid_info pinpad_uuid;

    Pinpad();
    Pinpad(const Pinpad& right);
    Pinpad& operator=(const Pinpad& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantBindCups
 */
struct MerchantBindCups {
    bool bValid;
    string strMerchantId;
    string strChannelMerchantId;
    string strShowChannelMerchantId;
    string strBindTime;
    int nBindType;
    int nBindKey;

    MerchantBindCups();
    MerchantBindCups(const MerchantBindCups& right);
    MerchantBindCups& operator=(const MerchantBindCups& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CupsMerchant
 */
struct CupsMerchant {
    bool bValid;
    string strCupsId;
    string strTerminalId;
    string strMerchantName;
    string strTerminalSn;
    string strZmk;
    string strZmkByLmk;
    string strMccCode;
    string strOrganNo;
    string strSource;
    string strCreateTime;
    string strUpdateTime;
    int nHasEncryptor;
    int nCommision;
    int nCommissionExt;
    int nMinCommissionOneTransaction;
    int nMaxCommissionOneTransaction;
    int nCommissionByDebitBymillion;
    int nMinCommissionDebit;
    int nMaxCommissionDebit;
    int nCommissionByCreditBymillion;
    int nMinCommissionCredit;
    int nMaxCommissionCredit;
    int nCommissionByOverseasBymillion;
    int nMinCommissionOverseas;
    int nMaxCommissionOverseas;
    int nPinfreeLimit;
    int nDailyLimit;
    int nPreferentialType;
    int nPinfreeState;
    int nEnable;
    int nContactless;
    int nEnableLimit;
    int nChargingType;

    CupsMerchant();
    CupsMerchant(const CupsMerchant& right);
    CupsMerchant& operator=(const CupsMerchant& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @RouteDetails
 */
struct RouteDetails {
    string strRegularNo;
    string strMerchantId;
    string strOrderId;
    string strTransactionId;
    string strSettlementAccount;
    string strPaychannelMerchantId;
    string strPaychannelTerminalId;
    string strPaychannelMerchantName;
    string strTopAgentId;
    string strPinpadUuid;
    string strMerchantOrganId;
    string strMerchantMccCode;
    string strPaychannelMerchantOrganId;
    string strPaychannelMerchantMccCode;
    string strEncryptCardId;
    int nBankCardType;
    int nPaychannelId;
    int nTerminalType;
    int nAmount;
    int nMerchantPreferentialType;
    int nPaychannelMerchantPreferentialType;

    RouteDetails();
    RouteDetails(const RouteDetails& right);
    RouteDetails& operator=(const RouteDetails& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelPosInfo
 */
struct ChannelPosInfo {
    string strPosSn;
    string strChannelMerchantId;
    string strChannelAgentId;
    string strTerminalId;
    string strTerminalType;
    int nChannelCatiStatus;
    int nChannelBusiFlag;
    int nChannelTjBusiFlag;

    ChannelPosInfo();
    ChannelPosInfo(const ChannelPosInfo& right);
    ChannelPosInfo& operator=(const ChannelPosInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelMerchantInfo
 */
struct ChannelMerchantInfo {
    string strChannelAgentId;
    string strChannelShopId;
    string strMerchantId;
    int nChannelMerchantStatus;
    int nChannelMerchantInsuranceFlag;
    int nChannelMerchantDebitT0Flag;
    int nChannelMerchantCreditT0Flag;
    int nChannelMerchantNocturnalT0Flag;
    int nChannelMerchantDebitCardAmountLimit;
    int nChannelMerchantCreditCardAmountLimit;
    int nChannelMerchantToWalletT0Flag;

    ChannelMerchantInfo();
    ChannelMerchantInfo(const ChannelMerchantInfo& right);
    ChannelMerchantInfo& operator=(const ChannelMerchantInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @TransactionInfo
 */
struct TransactionInfo {
    string strPaymentChannelMerchantDd;
    string strTransactionId;
    string strTime;
    int nPaymentChannelId;
    int nPanType;
    int nPanOverseas;

    TransactionInfo();
    TransactionInfo(const TransactionInfo& right);
    TransactionInfo& operator=(const TransactionInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeshuaPosOrder
 */
struct LeshuaPosOrder {
    string strPinpadId;
    string strBatchNo;
    string strFlowId;
    string strMerchantId;
    string strOrderId;
    string strEncryptCardId;
    string strCardId;
    bool bValid;

    LeshuaPosOrder();
    LeshuaPosOrder(const LeshuaPosOrder& right);
    LeshuaPosOrder& operator=(const LeshuaPosOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeshuaPreAuthOrder
 */
struct LeshuaPreAuthOrder {
    string strPinpadId;
    string strBatchNo;
    string strFlowId;
    string strPreAuthCode;
    string strMerchantId;
    string strOrderId;
    string strEncryptCardId;
    string strTrackData;
    string strDate;
    bool bValid;

    LeshuaPreAuthOrder();
    LeshuaPreAuthOrder(const LeshuaPreAuthOrder& right);
    LeshuaPreAuthOrder& operator=(const LeshuaPreAuthOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelPosOrder
 */
struct ChannelPosOrder {
    string strChannelPosCati;
    string strChannelBatchNo;
    string strChannelFlowId;
    string strChannelMerchantId;
    string strMerchantId;
    string strOrderId;
    string strTerminalId;
    string strEncryptCardId;

    ChannelPosOrder();
    ChannelPosOrder(const ChannelPosOrder& right);
    ChannelPosOrder& operator=(const ChannelPosOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Order
 */
struct Order {
    bool bValid;
    string strOrderId;
    string strMerchantId;
    string strUserName;
    string strGoodsType;
    string strGoodsName;
    string strGoodsDetails;
    string strThirdOrderId;
    string strReserverParam;
    string strTime;
    string strRoyalty;
    string strVocherId;
    string strClientIp;
    string strCallbackUrl;
    string strMerchantShopNo;
    string strMerchantPosNo;
    string strCustomerId;
    string strVoucherInfo;
    string strQrCode;
    string strErrorMsg;
    string strAttach;
    int nState;
    int nAmount;
    int nRefundAmount;
    int nPayMode;
    int nDepositComm;
    int nThirdPlatComm;
    int nPaychannelId;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nT0Flag;
    int nScanMethod;
    int nDeductPayType;
    int nPaySourceType;
    int nErrorType;

    Order();
    Order(const Order& right);
    Order& operator=(const Order& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Transaction
 */
struct Transaction {
    bool bValid;
    string strTransactionId;
    string strOrderId;
    string strMerchantId;
    string strPinpadId;
    string strLongitude;
    string strLatitude;
    string strUserName;
    int nAmount;
    int nOperationType;
    string strTime;
    string strCardId;
    string strCardBank;
    string strCardValid;
    string strCardSeqNum;
    string strIcField55;
    string strIcAid;
    string strIcAtc;
    string strIcTc;
    int nCardType;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nNoPwdFlag;
    int nPaychannelId;
    string strChlMerchantId;
    string strChlTerminalId;
    int nApptype;
    string strMobileId;
    string strChlOrderId;
    string strChlRefNum;
    string strChlSettleDate;
    string strChlAuthCode;
    string strChlBatchNum;
    string strChlErrCode;
    string strThirdTime;
    string strPinpadUuid;
    int nFlag;
    string strEncryptCardId;
    string strRecvBankCode;
    string strTopAgentId;
    string strRefundId;
    int nOrderAmount;
    int nCouponAmount;
    string strChlMcc;
    string strCardHoldSign;

    Transaction();
    Transaction(const Transaction& right);
    Transaction& operator=(const Transaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @simpleRisk
 */
struct simpleRisk {
    string strOrderId;
    string strMerchantId;
    int nAmount;
    int nT0Flag;
    int nChlId;
    string strRequest;
    string strOperationType;

    simpleRisk();
    simpleRisk(const simpleRisk& right);
    simpleRisk& operator=(const simpleRisk& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @leposParam
 */
struct leposParam {
    bool bValid;
    string strKey;
    string strValue;

    leposParam();
    leposParam(const leposParam& right);
    leposParam& operator=(const leposParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @mccInfo
 */
struct mccInfo {
    bool bValid;
    string strMccCode;
    string strFatherMccCode;
    string strGrandpaMccCode;
    int nMccType;
    int nDailyLimit;
    int nPinFreeFlag;

    mccInfo();
    mccInfo(const mccInfo& right);
    mccInfo& operator=(const mccInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @offlineOrder
 */
struct offlineOrder {
    bool bValid;
    string strField55;
    string strOrderId;
    string strMerchantId;
    string strPinpadUuid;
    int nAmount;

    offlineOrder();
    offlineOrder(const offlineOrder& right);
    offlineOrder& operator=(const offlineOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @offlineParam
 */
struct offlineParam {
    bool bValid;
    int nOfflineMerchantWhitelstFlag;
    string strOffLowBound;

    offlineParam();
    offlineParam(const offlineParam& right);
    offlineParam& operator=(const offlineParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @merchantFirstPayInfo
 */
struct merchantFirstPayInfo {
    bool bValid;
    string strMerchantId;
    string strOrderId;
    string strTopAgentId;
    string strEncryptCardId;
    int nAgentClass;
    int nAmount;

    merchantFirstPayInfo();
    merchantFirstPayInfo(const merchantFirstPayInfo& right);
    merchantFirstPayInfo& operator=(const merchantFirstPayInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinFreeCard
 */
struct pinFreeCard {
    string strEncryptCardId;
    string strCreateTime;

    pinFreeCard();
    pinFreeCard(const pinFreeCard& right);
    pinFreeCard& operator=(const pinFreeCard& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @delayInsurace
 */
struct delayInsurace {
    string strMerchantId;
    string strTopAgentId;
    string strOrderId;
    int nState;
    int nCompany;

    delayInsurace();
    delayInsurace(const delayInsurace& right);
    delayInsurace& operator=(const delayInsurace& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @channelTransaction
 */
struct channelTransaction {
    string strTransactionId;
    int nChannelId;
    string strChannelMerchantId;
    string strChannelTerminalId;
    int nAmount;
    int nOperationType;
    string strTime;
    string strThirdTime;

    channelTransaction();
    channelTransaction(const channelTransaction& right);
    channelTransaction& operator=(const channelTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @merchantTransaction
 */
struct merchantTransaction {
    string strTransactionId;
    int nChannelId;
    string strChannelMerchantId;
    string strChannelTerminalId;
    string strOrderId;
    string strMerchantId;
    int nAmount;
    int nOperationType;
    int nTradeStatus;
    string strTime;
    string strThirdTime;
    string strThirdChannelSettleDate;
    int nCardType;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nFlag;
    int nPaySource;
    int nDeductType;
    string strVoucherInfo;

    merchantTransaction();
    merchantTransaction(const merchantTransaction& right);
    merchantTransaction& operator=(const merchantTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @holdTransaction
 */
struct holdTransaction {
    string strTransactionId;
    string strMerchantId;
    int nChannelId;
    string strChannelMerchantId;
    string strChannelTerminalId;
    int nAmount;
    int nOperationType;
    string strTime;

    holdTransaction();
    holdTransaction(const holdTransaction& right);
    holdTransaction& operator=(const holdTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @orderExternInfo
 */
struct orderExternInfo {
    string strOrderID;
    int nPinAndSignFreeFlag;
    int nYunShanFuFlag;

    orderExternInfo();
    orderExternInfo(const orderExternInfo& right);
    orderExternInfo& operator=(const orderExternInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @leposOrganization
 */
struct leposOrganization {
    bool bValid;
    string strOrganizationNo;
    string strUseOrganizationNo;
    string strProvince;
    string strCity;
    string strCounty;
    string strAlias;
    int nCupsBlackRegionFlag;

    leposOrganization();
    leposOrganization(const leposOrganization& right);
    leposOrganization& operator=(const leposOrganization& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BankCardBin
 */
struct BankCardBin {
    string strBankId;
    string strBankName;
    string strCardType;
    string strCardBin;
    string strFinInstitutionCode;
    int nCardLength;
    int nContactless;
    int nOversea;
    int nDoubleFree;

    BankCardBin();
    BankCardBin(const BankCardBin& right);
    BankCardBin& operator=(const BankCardBin& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BankInstitutionCode
 */
struct BankInstitutionCode {
    string strFinInstitutionCode;
    string strEnSimpleName;

    BankInstitutionCode();
    BankInstitutionCode(const BankInstitutionCode& right);
    BankInstitutionCode& operator=(const BankInstitutionCode& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelAgent
 */
struct ChannelAgent {
    string strAgentId;
    string strTopAgentId;
    string strAgentParentId;
    string strAllSuperAgentAgentId;
    string strCoopNo;
    string strAgentName;
    int nAgentLevel;
    int nAgentClass;
    int nAgentType;

    ChannelAgent();
    ChannelAgent(const ChannelAgent& right);
    ChannelAgent& operator=(const ChannelAgent& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @HappyposAgentWithdrawInfo
 */
struct HappyposAgentWithdrawInfo {
    string strAgentID;
    int nUsageType;

    HappyposAgentWithdrawInfo();
    HappyposAgentWithdrawInfo(const HappyposAgentWithdrawInfo& right);
    HappyposAgentWithdrawInfo& operator=(const HappyposAgentWithdrawInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CardNoMerchantId
 */
struct CardNoMerchantId {
    string strCradNo;
    string strCustomerId;
    string strCreateTime;
    string strCpsBindId;
    int nChannelId;
    int nStatus;
    string strUpdateTime;

    CardNoMerchantId();
    CardNoMerchantId(const CardNoMerchantId& right);
    CardNoMerchantId& operator=(const CardNoMerchantId& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CPolicyParam
 */
struct CPolicyParam {
    bool bValid;
    int nId;
    string strPolicyId;
    string strName;
    string strValue;
    string strComment;
    int nStatus;
    string strUser;
    string strCreateTime;
    string strUpdateTime;

    CPolicyParam();
    CPolicyParam(const CPolicyParam& right);
    CPolicyParam& operator=(const CPolicyParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CChannelPosBatchInfo
 */
struct CChannelPosBatchInfo {
    string strChannelPosCati;
    string strBatchNo;
    string strCheckinTime;
    string strTime;

    CChannelPosBatchInfo();
    CChannelPosBatchInfo(const CChannelPosBatchInfo& right);
    CChannelPosBatchInfo& operator=(const CChannelPosBatchInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CSwipeCardCallbackInfo
 */
struct CSwipeCardCallbackInfo {
    string strOrderId;
    string strCallbackUrl;
    string strMessageHead;
    string strMessageBody;
    int nStatus;
    int nCurrentNum;
    string strStep;
    string strMaxNum;
    string strLastTime;
    string strTime;
    int nType;

    CSwipeCardCallbackInfo();
    CSwipeCardCallbackInfo(const CSwipeCardCallbackInfo& right);
    CSwipeCardCallbackInfo& operator=(const CSwipeCardCallbackInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CPosOperation
 */
struct CPosOperation {
    string strChannelPosCati;
    string strChannelPosBatchNo;
    string strChannelPosFlowId;
    string strChannelMerchantId;
    string strChannelPosShopId;
    string strChannelAgentId;
    int nOperationType;
    string strOrderId;
    string strTransactionId;
    string strShowCupsId;
    string strShowCupsName;
    string strResponseCode;

    CPosOperation();
    CPosOperation(const CPosOperation& right);
    CPosOperation& operator=(const CPosOperation& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PosMerchantTradeControlInfo
 */
struct PosMerchantTradeControlInfo {
    string strAgentID;
    string strTopAgentID;
    string strMerchantID;
    string strCreateTime;
    int nAgentClass;
    int nTradeMode;
    bool bValid;

    PosMerchantTradeControlInfo();
    PosMerchantTradeControlInfo(const PosMerchantTradeControlInfo& right);
    PosMerchantTradeControlInfo& operator=(const PosMerchantTradeControlInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PosMerchantSwitchMccControlInfo
 */
struct PosMerchantSwitchMccControlInfo {
    string strMerchantID;
    string strMccCode;
    int nAgentClass;
    int nStatus;

    PosMerchantSwitchMccControlInfo();
    PosMerchantSwitchMccControlInfo(const PosMerchantSwitchMccControlInfo& right);
    PosMerchantSwitchMccControlInfo& operator=(const PosMerchantSwitchMccControlInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CpsBusinessConfigInfo
 */
struct CpsBusinessConfigInfo {
    int nBusinessYype;
    string strModel;
    string strParentId;
    string strPayType;
    string strPaymentSource;
    int isCps;
    int isYkpay;
    int isPos2cps;
    string strAppTypes;

    CpsBusinessConfigInfo();
    CpsBusinessConfigInfo(const CpsBusinessConfigInfo& right);
    CpsBusinessConfigInfo& operator=(const CpsBusinessConfigInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @IsoPosInfo
 */
struct IsoPosInfo {
    string strPinpadID;
    string strPinpadUUID;
    string strTime;
    string strPosType;
    string strVersion;
    int nBatchNo;
    int nFlowID;
    int nRefNo;
    bool bValid;

    IsoPosInfo();
    IsoPosInfo(const IsoPosInfo& right);
    IsoPosInfo& operator=(const IsoPosInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeposParamInfo
 */
struct LeposParamInfo {
    string strKey;
    string strValue;
    bool bValid;

    LeposParamInfo();
    LeposParamInfo(const LeposParamInfo& right);
    LeposParamInfo& operator=(const LeposParamInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BaseStationInfo
 */
struct BaseStationInfo {
    string strMcc;
    string strMnc;
    string strLac;
    string strCi;
    string strLongitude;
    string strLatitude;
    bool bValid;

    BaseStationInfo();
    BaseStationInfo(const BaseStationInfo& right);
    BaseStationInfo& operator=(const BaseStationInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Pos2DeductRegular
 */
struct Pos2DeductRegular {
    string strRegularNo;
    string strRegularName;
    string strRegular;
    int nStatus;
    string strTime;
    db_agent_api::s) say_hello(req;

    Pos2DeductRegular();
    Pos2DeductRegular(const Pos2DeductRegular& right);
    Pos2DeductRegular& operator=(const Pos2DeductRegular& right);
    
};

//序列化接口
utils
{
    template<> utils::addJsonValue(jReq, "_Merchant_", const merchant& _merchant_);
    template<> utils::addJsonValue(jReq, "_MerchantCommission_", const merchantcommission& _merchantcommission_);
    template<> utils::addJsonValue(jReq, "_MerchantCommissionByPlanId_", const merchantcommissionbyplanid& _merchantcommissionbyplanid_);
    template<> utils::addJsonValue(jReq, "_Agent_", const agent& _agent_);
    template<> utils::addJsonValue(jReq, "_AgentCommission_", const agentcommission& _agentcommission_);
    template<> utils::addJsonValue(jReq, "_PinpadCheckin_", const pinpadcheckin& _pinpadcheckin_);
    template<> utils::addJsonValue(jReq, "_pinpad_info_", const pinpad_info& _pinpad_info_);
    template<> utils::addJsonValue(jReq, "_pinpad_uuid_info_", const pinpad_uuid_info& _pinpad_uuid_info_);
    template<> utils::addJsonValue(jReq, "_Pinpad_", const pinpad& _pinpad_);
    template<> utils::addJsonValue(jReq, "_MerchantBindCups_", const merchantbindcups& _merchantbindcups_);
    template<> utils::addJsonValue(jReq, "_CupsMerchant_", const cupsmerchant& _cupsmerchant_);
    template<> utils::addJsonValue(jReq, "_RouteDetails_", const routedetails& _routedetails_);
    template<> utils::addJsonValue(jReq, "_ChannelPosInfo_", const channelposinfo& _channelposinfo_);
    template<> utils::addJsonValue(jReq, "_ChannelMerchantInfo_", const channelmerchantinfo& _channelmerchantinfo_);
    template<> utils::addJsonValue(jReq, "_TransactionInfo_", const transactioninfo& _transactioninfo_);
    template<> utils::addJsonValue(jReq, "_LeshuaPosOrder_", const leshuaposorder& _leshuaposorder_);
    template<> utils::addJsonValue(jReq, "_LeshuaPreAuthOrder_", const leshuapreauthorder& _leshuapreauthorder_);
    template<> utils::addJsonValue(jReq, "_ChannelPosOrder_", const channelposorder& _channelposorder_);
    template<> utils::addJsonValue(jReq, "_Order_", const order& _order_);
    template<> utils::addJsonValue(jReq, "_Transaction_", const transaction& _transaction_);
    template<> utils::addJsonValue(jReq, "_simpleRisk_", const simplerisk& _simplerisk_);
    template<> utils::addJsonValue(jReq, "_leposParam_", const leposparam& _leposparam_);
    template<> utils::addJsonValue(jReq, "_mccInfo_", const mccinfo& _mccinfo_);
    template<> utils::addJsonValue(jReq, "_offlineOrder_", const offlineorder& _offlineorder_);
    template<> utils::addJsonValue(jReq, "_offlineParam_", const offlineparam& _offlineparam_);
    template<> utils::addJsonValue(jReq, "_merchantFirstPayInfo_", const merchantfirstpayinfo& _merchantfirstpayinfo_);
    template<> utils::addJsonValue(jReq, "_pinFreeCard_", const pinfreecard& _pinfreecard_);
    template<> utils::addJsonValue(jReq, "_delayInsurace_", const delayinsurace& _delayinsurace_);
    template<> utils::addJsonValue(jReq, "_channelTransaction_", const channeltransaction& _channeltransaction_);
    template<> utils::addJsonValue(jReq, "_merchantTransaction_", const merchanttransaction& _merchanttransaction_);
    template<> utils::addJsonValue(jReq, "_holdTransaction_", const holdtransaction& _holdtransaction_);
    template<> utils::addJsonValue(jReq, "_orderExternInfo_", const orderexterninfo& _orderexterninfo_);
    template<> utils::addJsonValue(jReq, "_leposOrganization_", const leposorganization& _leposorganization_);
    template<> utils::addJsonValue(jReq, "_BankCardBin_", const bankcardbin& _bankcardbin_);
    template<> utils::addJsonValue(jReq, "_BankInstitutionCode_", const bankinstitutioncode& _bankinstitutioncode_);
    template<> utils::addJsonValue(jReq, "_ChannelAgent_", const channelagent& _channelagent_);
    template<> utils::addJsonValue(jReq, "_HappyposAgentWithdrawInfo_", const happyposagentwithdrawinfo& _happyposagentwithdrawinfo_);
    template<> utils::addJsonValue(jReq, "_CardNoMerchantId_", const cardnomerchantid& _cardnomerchantid_);
    template<> utils::addJsonValue(jReq, "_CPolicyParam_", const cpolicyparam& _cpolicyparam_);
    template<> utils::addJsonValue(jReq, "_CChannelPosBatchInfo_", const cchannelposbatchinfo& _cchannelposbatchinfo_);
    template<> utils::addJsonValue(jReq, "_CSwipeCardCallbackInfo_", const cswipecardcallbackinfo& _cswipecardcallbackinfo_);
    template<> utils::addJsonValue(jReq, "_CPosOperation_", const cposoperation& _cposoperation_);
    template<> utils::addJsonValue(jReq, "_PosMerchantTradeControlInfo_", const posmerchanttradecontrolinfo& _posmerchanttradecontrolinfo_);
    template<> utils::addJsonValue(jReq, "_PosMerchantSwitchMccControlInfo_", const posmerchantswitchmcccontrolinfo& _posmerchantswitchmcccontrolinfo_);
    template<> utils::addJsonValue(jReq, "_CpsBusinessConfigInfo_", const cpsbusinessconfiginfo& _cpsbusinessconfiginfo_);
    template<> utils::addJsonValue(jReq, "_IsoPosInfo_", const isoposinfo& _isoposinfo_);
    template<> utils::addJsonValue(jReq, "_LeposParamInfo_", const leposparaminfo& _leposparaminfo_);
    template<> utils::addJsonValue(jReq, "_BaseStationInfo_", const basestationinfo& _basestationinfo_);
    template<> utils::addJsonValue(jReq, "_Pos2DeductRegular_", const pos2deductregular& _pos2deductregular_);
}
}//db_agent_api

#endif //DBINTERFACE_CPP_DBAGENT_STRUCT_H_
