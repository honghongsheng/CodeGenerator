/**
  File:
  Note : This file is generated by codegenerator.
  Author: JanyHong(janyhong@yeahka.com)
  Version: v1.0.0
*/
#ifndef DBINTERFACE_CPP_DBAGENT_STRUCT_H_
#define DBINTERFACE_CPP_DBAGENT_STRUCT_H_
#include <string>
#include <map>
#include <vector>
#include <list>
#include <json/json.h>


namespace db_agent_api
{
/**
 * @Merchant
 */
struct Merchant {
    bool bValid;
    std::string strMerchantId;
    std::string strUnionPayMerchantId;
    std::string strMerchantName;
    std::string strAgentId;
    std::string strTopAgentId;
    std::string strMccCode;
    std::string strRealMccCode;
    std::string strApplicant;
    std::string strBankArea;
    std::string strBankAccount;
    std::string strBankCity;
    std::string strbankHolder;
    std::string strProvince;
    std::string strCity;
    std::string strCreateTime;
    std::string strStartTimeLimit;
    std::string strEndTimeLimit;
    std::string strIdCard;
    std::string strLatitude;
    std::string strLongitude;
    std::string strUnionpayCode;
    std::string strChannelMerchantId;
    std::string strMobile;
    std::string strUserName;
    std::string strMerchantKey;
    std::string strBankName;
    int nSpId;
    int nBankAccountType;
    int nMiaodaoActivity;
    int nChannelId;
    int nMerchantFlag;
    int nPosLevel;
    int nPreauthLevel;
    int nPreAuthorizationFlag;
    int nQuickLevel;
    int nUnionScanLevel;
    int nWxLevel;
    int nState;
    int nBitFlag;
    int nMerchantType;
    int nPinfreeState;
    int nRegisterStatus;
    int nPosRefundFlag;
    int nCategory_id;
    int nIsdel;
    int nStatus;
    int nPinfreeLimit;
    int nAlipaySingleMaxAmount;
    int nAlipayOrdermaxAmount;
    int nCreditMouthMaxAmount;
    int nCreditOrderMaxAmount;
    int nCreditSingleMaxAmount;
    int nDebitMouthMaxAmount;
    int nDebitOrderMaxAmount;
    int nDebitSingleMaxAmount;
    int nMaxCommissionOneTransaction;
    int nCommission;
    int nCommissionDudect;
    int nCommissionByWeixin;
    int nIsBackUpCommission;
    int nBackUpCommission;
    int nBackUpMaxCommissionOneTransaction;
    int nSaasMultiAmountWarnVolume;
    int nSettlementTimeFlag;
    int nActiveDays;

    Merchant();
    Merchant(const Merchant& right);
    Merchant& operator=(const Merchant& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantCommission
 */
struct MerchantCommission {
    bool bValid;
    std::string strMerchantId;
    std::string strCreateTime;
    int nPreferentialType;
    int nT1DebitCardCommission;
    int nT1DebitCardMaxFee;
    int nT1CreditCardCommission;
    int nT1OverseasCardCommission;
    int nT0DebitCardCommission;
    int nT0CreditCardCommission;
    int nT0OverseasCardCommission;
    int nT0CommissionFixed;

    MerchantCommission();
    MerchantCommission(const MerchantCommission& right);
    MerchantCommission& operator=(const MerchantCommission& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantCommissionByPlanId
 */
struct MerchantCommissionByPlanId {
    bool bValid;
    int nPlanId;
    int nRateByMillion;
    int nMaxFeeByMillion;

    MerchantCommissionByPlanId();
    MerchantCommissionByPlanId(const MerchantCommissionByPlanId& right);
    MerchantCommissionByPlanId& operator=(const MerchantCommissionByPlanId& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Agent
 */
struct Agent {
    bool bValid;
    std::string strAgentId;
    std::string strAgentName;
    std::string strParentId;
    std::string strThirdPartyPublicKey;
    int nproperty;
    int nAgentType;
    int nAgentClass;
    int nStatus;
    int nProfitRuleType;
    std::string strCreateTime;

    Agent();
    Agent(const Agent& right);
    Agent& operator=(const Agent& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @AgentCommission
 */
struct AgentCommission {
    bool bValid;
    std::string strAgentId;
    std::string strStartDate;
    std::string strUpdateTime;
    int nPreferentialType;
    int nT1DebitCommissionBymillion;
    int nT1DebitMaxFeeBymillion;
    int nT1CreditCommissionBymillion;
    int nT1OverseasCommissionBymillion;
    int nT0DebitCommissionBymillion;
    int nT0CreditCommissionBymillion;
    int nT0OverseasCommissionBymillion;
    int nT0DebitBlendCommissionBymillion;
    int nT0CreditBlendCommissionBymillion;
    int nT0OverseasBlendCommissionBymillion;

    AgentCommission();
    AgentCommission(const AgentCommission& right);
    AgentCommission& operator=(const AgentCommission& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PinpadCheckin
 */
struct PinpadCheckin {
    std::string strPinpadId;
    std::string strTakByLmk;
    std::string strTakByTmk;
    std::string strCheckInTime;

    PinpadCheckin();
    PinpadCheckin(const PinpadCheckin& right);
    PinpadCheckin& operator=(const PinpadCheckin& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinpad_info
 */
struct pinpad_info {
    bool bValid;
    int nHasEncryptor;
    int nState;
    std::string strPinpadId;
    std::string strMerchantId;
    std::string strSerialNum;
    std::string strTTK;
    std::string strTmkByLmk;
    std::string strTpkByTmk;
    std::string strTpkByLmk;
    std::string strPinpadUuid;

    pinpad_info();
    pinpad_info(const pinpad_info& right);
    pinpad_info& operator=(const pinpad_info& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinpad_uuid_info
 */
struct pinpad_uuid_info {
    bool bValid;
    int nStatus;
    int nMaxUnbindTimes;
    int nEnable;
    int nRepairCounts;
    int nLoadTmkAllowNum;
    std::string strPinpadUuid;
    std::string strPinpadId;
    std::string strDeviceId;
    std::string strCreateTime;
    std::string strStartUsingTime;
    std::string strStartUsingDay;
    std::string strLastRepairTime;
    std::string strSn;
    std::string strIndustryName;
    std::string strIndustryModel;
    std::string strPinpadCreateTime;
    std::string strPinpadCommuication;
    std::string strPinpadOrganNo;
    std::string strPosType;
    std::string strIndustryCode;
    std::string strStoreTime;
    std::string strDeliverTime;
    std::string strLeshuaModel;
    std::string strAuthCode;

    pinpad_uuid_info();
    pinpad_uuid_info(const pinpad_uuid_info& right);
    pinpad_uuid_info& operator=(const pinpad_uuid_info& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Pinpad
 */
struct Pinpad {
    db_agent_api::pinpad_info pinpad;
    db_agent_api::pinpad_uuid_info pinpad_uuid;

    Pinpad();
    Pinpad(const Pinpad& right);
    Pinpad& operator=(const Pinpad& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @MerchantBindCups
 */
struct MerchantBindCups {
    bool bValid;
    std::string strMerchantId;
    std::string strChannelMerchantId;
    std::string strShowChannelMerchantId;
    std::string strBindTime;
    int nBindType;
    int nBindKey;

    MerchantBindCups();
    MerchantBindCups(const MerchantBindCups& right);
    MerchantBindCups& operator=(const MerchantBindCups& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CupsMerchant
 */
struct CupsMerchant {
    bool bValid;
    std::string strCupsId;
    std::string strTerminalId;
    std::string strMerchantName;
    std::string strTerminalSn;
    std::string strZmk;
    std::string strZmkByLmk;
    std::string strMccCode;
    std::string strOrganNo;
    std::string strSource;
    std::string strCreateTime;
    std::string strUpdateTime;
    int nHasEncryptor;
    int nCommision;
    int nCommissionExt;
    int nMinCommissionOneTransaction;
    int nMaxCommissionOneTransaction;
    int nCommissionByDebitBymillion;
    int nMinCommissionDebit;
    int nMaxCommissionDebit;
    int nCommissionByCreditBymillion;
    int nMinCommissionCredit;
    int nMaxCommissionCredit;
    int nCommissionByOverseasBymillion;
    int nMinCommissionOverseas;
    int nMaxCommissionOverseas;
    int nPinfreeLimit;
    int nDailyLimit;
    int nPreferentialType;
    int nPinfreeState;
    int nEnable;
    int nContactless;
    int nEnableLimit;
    int nChargingType;

    CupsMerchant();
    CupsMerchant(const CupsMerchant& right);
    CupsMerchant& operator=(const CupsMerchant& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @RouteDetails
 */
struct RouteDetails {
    std::string strRegularNo;
    std::string strMerchantId;
    std::string strOrderId;
    std::string strTransactionId;
    std::string strSettlementAccount;
    std::string strPaychannelMerchantId;
    std::string strPaychannelTerminalId;
    std::string strPaychannelMerchantName;
    std::string strTopAgentId;
    std::string strPinpadUuid;
    std::string strMerchantOrganId;
    std::string strMerchantMccCode;
    std::string strPaychannelMerchantOrganId;
    std::string strPaychannelMerchantMccCode;
    std::string strEncryptCardId;
    int nBankCardType;
    int nPaychannelId;
    int nTerminalType;
    int nAmount;
    int nMerchantPreferentialType;
    int nPaychannelMerchantPreferentialType;

    RouteDetails();
    RouteDetails(const RouteDetails& right);
    RouteDetails& operator=(const RouteDetails& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelPosInfo
 */
struct ChannelPosInfo {
    std::string strPosSn;
    std::string strChannelMerchantId;
    std::string strChannelAgentId;
    std::string strTerminalId;
    std::string strTerminalType;
    int nChannelCatiStatus;
    int nChannelBusiFlag;
    int nChannelTjBusiFlag;

    ChannelPosInfo();
    ChannelPosInfo(const ChannelPosInfo& right);
    ChannelPosInfo& operator=(const ChannelPosInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelMerchantInfo
 */
struct ChannelMerchantInfo {
    std::string strChannelAgentId;
    std::string strChannelShopId;
    std::string strMerchantId;
    int nChannelMerchantStatus;
    int nChannelMerchantInsuranceFlag;
    int nChannelMerchantDebitT0Flag;
    int nChannelMerchantCreditT0Flag;
    int nChannelMerchantNocturnalT0Flag;
    int nChannelMerchantDebitCardAmountLimit;
    int nChannelMerchantCreditCardAmountLimit;
    int nChannelMerchantToWalletT0Flag;

    ChannelMerchantInfo();
    ChannelMerchantInfo(const ChannelMerchantInfo& right);
    ChannelMerchantInfo& operator=(const ChannelMerchantInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @TransactionInfo
 */
struct TransactionInfo {
    std::string strPaymentChannelMerchantDd;
    std::string strTransactionId;
    std::string strTime;
    int nPaymentChannelId;
    int nPanType;
    int nPanOverseas;

    TransactionInfo();
    TransactionInfo(const TransactionInfo& right);
    TransactionInfo& operator=(const TransactionInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeshuaPosOrder
 */
struct LeshuaPosOrder {
    std::string strPinpadId;
    std::string strBatchNo;
    std::string strFlowId;
    std::string strMerchantId;
    std::string strOrderId;
    std::string strEncryptCardId;
    std::string strCardId;
    bool bValid;

    LeshuaPosOrder();
    LeshuaPosOrder(const LeshuaPosOrder& right);
    LeshuaPosOrder& operator=(const LeshuaPosOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeshuaPreAuthOrder
 */
struct LeshuaPreAuthOrder {
    std::string strPinpadId;
    std::string strBatchNo;
    std::string strFlowId;
    std::string strPreAuthCode;
    std::string strMerchantId;
    std::string strOrderId;
    std::string strEncryptCardId;
    std::string strTrackData;
    std::string strDate;
    bool bValid;

    LeshuaPreAuthOrder();
    LeshuaPreAuthOrder(const LeshuaPreAuthOrder& right);
    LeshuaPreAuthOrder& operator=(const LeshuaPreAuthOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelPosOrder
 */
struct ChannelPosOrder {
    std::string strChannelPosCati;
    std::string strChannelBatchNo;
    std::string strChannelFlowId;
    std::string strChannelMerchantId;
    std::string strMerchantId;
    std::string strOrderId;
    std::string strTerminalId;
    std::string strEncryptCardId;

    ChannelPosOrder();
    ChannelPosOrder(const ChannelPosOrder& right);
    ChannelPosOrder& operator=(const ChannelPosOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Order
 */
struct Order {
    bool bValid;
    std::string strOrderId;
    std::string strMerchantId;
    std::string strUserName;
    std::string strGoodsType;
    std::string strGoodsName;
    std::string strGoodsDetails;
    std::string strThirdOrderId;
    std::string strReserverParam;
    std::string strTime;
    std::string strRoyalty;
    std::string strVocherId;
    std::string strClientIp;
    std::string strCallbackUrl;
    std::string strMerchantShopNo;
    std::string strMerchantPosNo;
    std::string strCustomerId;
    std::string strVoucherInfo;
    std::string strQrCode;
    std::string strErrorMsg;
    std::string strAttach;
    int nState;
    int nAmount;
    int nRefundAmount;
    int nPayMode;
    int nDepositComm;
    int nThirdPlatComm;
    int nPaychannelId;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nT0Flag;
    int nScanMethod;
    int nDeductPayType;
    int nPaySourceType;
    int nErrorType;

    Order();
    Order(const Order& right);
    Order& operator=(const Order& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Transaction
 */
struct Transaction {
    bool bValid;
    std::string strTransactionId;
    std::string strOrderId;
    std::string strMerchantId;
    std::string strPinpadId;
    std::string strLongitude;
    std::string strLatitude;
    std::string strUserName;
    int nAmount;
    int nOperationType;
    std::string strTime;
    std::string strCardId;
    std::string strCardBank;
    std::string strCardValid;
    std::string strCardSeqNum;
    std::string strIcField55;
    std::string strIcAid;
    std::string strIcAtc;
    std::string strIcTc;
    int nCardType;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nNoPwdFlag;
    int nPaychannelId;
    std::string strChlMerchantId;
    std::string strChlTerminalId;
    int nApptype;
    std::string strMobileId;
    std::string strChlOrderId;
    std::string strChlRefNum;
    std::string strChlSettleDate;
    std::string strChlAuthCode;
    std::string strChlBatchNum;
    std::string strChlErrCode;
    std::string strThirdTime;
    std::string strPinpadUuid;
    int nFlag;
    std::string strEncryptCardId;
    std::string strRecvBankCode;
    std::string strTopAgentId;
    std::string strRefundId;
    int nOrderAmount;
    int nCouponAmount;
    std::string strChlMcc;
    std::string strCardHoldSign;

    Transaction();
    Transaction(const Transaction& right);
    Transaction& operator=(const Transaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @simpleRisk
 */
struct simpleRisk {
    std::string strOrderId;
    std::string strMerchantId;
    int nAmount;
    int nT0Flag;
    int nChlId;
    std::string strRequest;
    std::string strOperationType;

    simpleRisk();
    simpleRisk(const simpleRisk& right);
    simpleRisk& operator=(const simpleRisk& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @leposParam
 */
struct leposParam {
    bool bValid;
    std::string strKey;
    std::string strValue;

    leposParam();
    leposParam(const leposParam& right);
    leposParam& operator=(const leposParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @mccInfo
 */
struct mccInfo {
    bool bValid;
    std::string strMccCode;
    std::string strFatherMccCode;
    std::string strGrandpaMccCode;
    int nMccType;
    int nDailyLimit;
    int nPinFreeFlag;

    mccInfo();
    mccInfo(const mccInfo& right);
    mccInfo& operator=(const mccInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @offlineOrder
 */
struct offlineOrder {
    bool bValid;
    std::string strField55;
    std::string strOrderId;
    std::string strMerchantId;
    std::string strPinpadUuid;
    int nAmount;

    offlineOrder();
    offlineOrder(const offlineOrder& right);
    offlineOrder& operator=(const offlineOrder& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @offlineParam
 */
struct offlineParam {
    bool bValid;
    int nOfflineMerchantWhitelstFlag;
    std::string strOffLowBound;

    offlineParam();
    offlineParam(const offlineParam& right);
    offlineParam& operator=(const offlineParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @merchantFirstPayInfo
 */
struct merchantFirstPayInfo {
    bool bValid;
    std::string strMerchantId;
    std::string strOrderId;
    std::string strTopAgentId;
    std::string strEncryptCardId;
    int nAgentClass;
    int nAmount;

    merchantFirstPayInfo();
    merchantFirstPayInfo(const merchantFirstPayInfo& right);
    merchantFirstPayInfo& operator=(const merchantFirstPayInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @pinFreeCard
 */
struct pinFreeCard {
    std::string strEncryptCardId;
    std::string strCreateTime;

    pinFreeCard();
    pinFreeCard(const pinFreeCard& right);
    pinFreeCard& operator=(const pinFreeCard& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @delayInsurace
 */
struct delayInsurace {
    std::string strMerchantId;
    std::string strTopAgentId;
    std::string strOrderId;
    int nState;
    int nCompany;

    delayInsurace();
    delayInsurace(const delayInsurace& right);
    delayInsurace& operator=(const delayInsurace& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @channelTransaction
 */
struct channelTransaction {
    std::string strTransactionId;
    int nChannelId;
    std::string strChannelMerchantId;
    std::string strChannelTerminalId;
    int nAmount;
    int nOperationType;
    std::string strTime;
    std::string strThirdTime;

    channelTransaction();
    channelTransaction(const channelTransaction& right);
    channelTransaction& operator=(const channelTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @merchantTransaction
 */
struct merchantTransaction {
    std::string strTransactionId;
    int nChannelId;
    std::string strChannelMerchantId;
    std::string strChannelTerminalId;
    std::string strOrderId;
    std::string strMerchantId;
    int nAmount;
    int nOperationType;
    int nTradeStatus;
    std::string strTime;
    std::string strThirdTime;
    std::string strThirdChannelSettleDate;
    int nCardType;
    int nPanType;
    int nPanClass;
    int nPanProducts;
    int nPanOverseas;
    int nFlag;
    int nPaySource;
    int nDeductType;
    std::string strVoucherInfo;

    merchantTransaction();
    merchantTransaction(const merchantTransaction& right);
    merchantTransaction& operator=(const merchantTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @holdTransaction
 */
struct holdTransaction {
    std::string strTransactionId;
    std::string strMerchantId;
    int nChannelId;
    std::string strChannelMerchantId;
    std::string strChannelTerminalId;
    int nAmount;
    int nOperationType;
    std::string strTime;

    holdTransaction();
    holdTransaction(const holdTransaction& right);
    holdTransaction& operator=(const holdTransaction& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @orderExternInfo
 */
struct orderExternInfo {
    std::string strOrderID;
    int nPinAndSignFreeFlag;
    int nYunShanFuFlag;

    orderExternInfo();
    orderExternInfo(const orderExternInfo& right);
    orderExternInfo& operator=(const orderExternInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @leposOrganization
 */
struct leposOrganization {
    bool bValid;
    std::string strOrganizationNo;
    std::string strUseOrganizationNo;
    std::string strProvince;
    std::string strCity;
    std::string strCounty;
    std::string strAlias;
    int nCupsBlackRegionFlag;

    leposOrganization();
    leposOrganization(const leposOrganization& right);
    leposOrganization& operator=(const leposOrganization& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BankCardBin
 */
struct BankCardBin {
    std::string strBankId;
    std::string strBankName;
    std::string strCardType;
    std::string strCardBin;
    std::string strFinInstitutionCode;
    int nCardLength;
    int nContactless;
    int nOversea;
    int nDoubleFree;

    BankCardBin();
    BankCardBin(const BankCardBin& right);
    BankCardBin& operator=(const BankCardBin& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BankInstitutionCode
 */
struct BankInstitutionCode {
    std::string strFinInstitutionCode;
    std::string strEnSimpleName;

    BankInstitutionCode();
    BankInstitutionCode(const BankInstitutionCode& right);
    BankInstitutionCode& operator=(const BankInstitutionCode& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @ChannelAgent
 */
struct ChannelAgent {
    std::string strAgentId;
    std::string strTopAgentId;
    std::string strAgentParentId;
    std::string strAllSuperAgentAgentId;
    std::string strCoopNo;
    std::string strAgentName;
    int nAgentLevel;
    int nAgentClass;
    int nAgentType;

    ChannelAgent();
    ChannelAgent(const ChannelAgent& right);
    ChannelAgent& operator=(const ChannelAgent& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @HappyposAgentWithdrawInfo
 */
struct HappyposAgentWithdrawInfo {
    std::string strAgentID;
    int nUsageType;

    HappyposAgentWithdrawInfo();
    HappyposAgentWithdrawInfo(const HappyposAgentWithdrawInfo& right);
    HappyposAgentWithdrawInfo& operator=(const HappyposAgentWithdrawInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CardNoMerchantId
 */
struct CardNoMerchantId {
    std::string strCradNo;
    std::string strCustomerId;
    std::string strCreateTime;
    std::string strCpsBindId;
    int nChannelId;
    int nStatus;
    std::string strUpdateTime;

    CardNoMerchantId();
    CardNoMerchantId(const CardNoMerchantId& right);
    CardNoMerchantId& operator=(const CardNoMerchantId& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CPolicyParam
 */
struct CPolicyParam {
    bool bValid;
    int nId;
    std::string strPolicyId;
    std::string strName;
    std::string strValue;
    std::string strComment;
    int nStatus;
    std::string strUser;
    std::string strCreateTime;
    std::string strUpdateTime;

    CPolicyParam();
    CPolicyParam(const CPolicyParam& right);
    CPolicyParam& operator=(const CPolicyParam& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CChannelPosBatchInfo
 */
struct CChannelPosBatchInfo {
    std::string strChannelPosCati;
    std::string strBatchNo;
    std::string strCheckinTime;
    std::string strTime;

    CChannelPosBatchInfo();
    CChannelPosBatchInfo(const CChannelPosBatchInfo& right);
    CChannelPosBatchInfo& operator=(const CChannelPosBatchInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CSwipeCardCallbackInfo
 */
struct CSwipeCardCallbackInfo {
    std::string strOrderId;
    std::string strCallbackUrl;
    std::string strMessageHead;
    std::string strMessageBody;
    int nStatus;
    int nCurrentNum;
    std::string strStep;
    std::string strMaxNum;
    std::string strLastTime;
    std::string strTime;
    int nType;

    CSwipeCardCallbackInfo();
    CSwipeCardCallbackInfo(const CSwipeCardCallbackInfo& right);
    CSwipeCardCallbackInfo& operator=(const CSwipeCardCallbackInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CPosOperation
 */
struct CPosOperation {
    std::string strChannelPosCati;
    std::string strChannelPosBatchNo;
    std::string strChannelPosFlowId;
    std::string strChannelMerchantId;
    std::string strChannelPosShopId;
    std::string strChannelAgentId;
    int nOperationType;
    std::string strOrderId;
    std::string strTransactionId;
    std::string strShowCupsId;
    std::string strShowCupsName;
    std::string strResponseCode;

    CPosOperation();
    CPosOperation(const CPosOperation& right);
    CPosOperation& operator=(const CPosOperation& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PosMerchantTradeControlInfo
 */
struct PosMerchantTradeControlInfo {
    std::string strAgentID;
    std::string strTopAgentID;
    std::string strMerchantID;
    std::string strCreateTime;
    int nAgentClass;
    int nTradeMode;
    bool bValid;

    PosMerchantTradeControlInfo();
    PosMerchantTradeControlInfo(const PosMerchantTradeControlInfo& right);
    PosMerchantTradeControlInfo& operator=(const PosMerchantTradeControlInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @PosMerchantSwitchMccControlInfo
 */
struct PosMerchantSwitchMccControlInfo {
    std::string strMerchantID;
    std::string strMccCode;
    int nAgentClass;
    int nStatus;

    PosMerchantSwitchMccControlInfo();
    PosMerchantSwitchMccControlInfo(const PosMerchantSwitchMccControlInfo& right);
    PosMerchantSwitchMccControlInfo& operator=(const PosMerchantSwitchMccControlInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @CpsBusinessConfigInfo
 */
struct CpsBusinessConfigInfo {
    int nBusinessYype;
    std::string strModel;
    std::string strParentId;
    std::string strPayType;
    std::string strPaymentSource;
    int isCps;
    int isYkpay;
    int isPos2cps;
    std::string strAppTypes;

    CpsBusinessConfigInfo();
    CpsBusinessConfigInfo(const CpsBusinessConfigInfo& right);
    CpsBusinessConfigInfo& operator=(const CpsBusinessConfigInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @IsoPosInfo
 */
struct IsoPosInfo {
    std::string strPinpadID;
    std::string strPinpadUUID;
    std::string strTime;
    std::string strPosType;
    std::string strVersion;
    int nBatchNo;
    int nFlowID;
    int nRefNo;
    bool bValid;

    IsoPosInfo();
    IsoPosInfo(const IsoPosInfo& right);
    IsoPosInfo& operator=(const IsoPosInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @LeposParamInfo
 */
struct LeposParamInfo {
    std::string strKey;
    std::string strValue;
    bool bValid;

    LeposParamInfo();
    LeposParamInfo(const LeposParamInfo& right);
    LeposParamInfo& operator=(const LeposParamInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @BaseStationInfo
 */
struct BaseStationInfo {
    std::string strMcc;
    std::string strMnc;
    std::string strLac;
    std::string strCi;
    std::string strLongitude;
    std::string strLatitude;
    bool bValid;

    BaseStationInfo();
    BaseStationInfo(const BaseStationInfo& right);
    BaseStationInfo& operator=(const BaseStationInfo& right);
    
    void fromJson(Json::Value& jsonObj);
    void toJson(Json::Value& jsonObj) const;
};

/**
 * @Pos2DeductRegular
 */
struct Pos2DeductRegular {
    std::string strRegularNo;
    std::string strRegularName;
    std::string strRegular;
    int nStatus;
    std::string strTime;
    db_agent_api::s) say_hello(req;
    std::string say_hi(name;

    Pos2DeductRegular();
    Pos2DeductRegular(const Pos2DeductRegular& right);
    Pos2DeductRegular& operator=(const Pos2DeductRegular& right);
    
};
}//db_agent_api

#endif //DBINTERFACE_CPP_DBAGENT_STRUCT_H_
