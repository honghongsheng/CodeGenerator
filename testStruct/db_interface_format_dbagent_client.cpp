/**
  File:
  Note : This file is generated by codegenerator.
  Author: JanyHong
  Version: v1.0.0
*/
#include ".//db_interface_format_dbagent_struct.h"
namespace db_agent_api
{
dbInterface_client::dbInterface_client()
    {{InitCode}}
{}

void dbInterface_client::init()
{
}
void dbInterface_client::say_hello(const std::string& req, std::string& resq, )
{
    //yk_db
    int nRet = -1;
    do
    {
        json::value request;
        request["operation"] = "say_hello";
        request["tag"] = strTag;
        utils::append(request, "req", req);
        Boom::Buffer respbuf;
        if(0 != request_db_agent(request, response))
        {
            nRet = -1;
            break;
        }
        utils::safe(response, "resq", resq);
    }while(0);
}

void dbInterface_client::get_agent_commission(const std::string& strTag, const std::string& strTraceId, const std::string& strAgentId, const std::string& strMerchantCreateTime, const std::string& nPreferentialType, db_agent_api::MerchantCommission& agentComm, )
{
    //yk_db
    int nRet = -1;
    do
    {
        json::value request;
        request["operation"] = "get_agent_commission";
        request["tag"] = strTag;
        utils::append(request, "strTag", strTag);
        utils::append(request, "strTraceId", strTraceId);
        utils::append(request, "strAgentId", strAgentId);
        utils::append(request, "strMerchantCreateTime", strMerchantCreateTime);
        utils::append(request, "nPreferentialType", nPreferentialType);
        Boom::Buffer respbuf;
        if(0 != request_db_agent(request, response))
        {
            nRet = -1;
            break;
        }
        utils::safe(response, "agentComm", agentComm);
    }while(0);
}


}//db_agent_api
