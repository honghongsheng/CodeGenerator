/**
  File:
  Note : This file is generated by codegenerator.
  Author: JanyHong(janyhong@yeahka.com)
  Version: v1.0.0
*/
#include "DBInterface_dbagent_struct.h"
namespace db_agent_api
{
//////////////////////////////
///Merchant
////////////////////////////////
Merchant::Merchant()
    : bValid(utils::defaultValue<bool>())
    , nSpId(utils::defaultValue<int>())
    , nBankAccountType(utils::defaultValue<int>())
    , nMiaodaoActivity(utils::defaultValue<int>())
    , nChannelId(utils::defaultValue<int>())
    , nMerchantFlag(utils::defaultValue<int>())
    , nPosLevel(utils::defaultValue<int>())
    , nPreauthLevel(utils::defaultValue<int>())
    , nPreAuthorizationFlag(utils::defaultValue<int>())
    , nQuickLevel(utils::defaultValue<int>())
    , nUnionScanLevel(utils::defaultValue<int>())
    , nWxLevel(utils::defaultValue<int>())
    , nState(utils::defaultValue<int>())
    , nBitFlag(utils::defaultValue<int>())
    , nMerchantType(utils::defaultValue<int>())
    , nPinfreeState(utils::defaultValue<int>())
    , nRegisterStatus(utils::defaultValue<int>())
    , nPosRefundFlag(utils::defaultValue<int>())
    , nCategory_id(utils::defaultValue<int>())
    , nIsdel(utils::defaultValue<int>())
    , nStatus(utils::defaultValue<int>())
    , nPinfreeLimit(utils::defaultValue<int>())
    , nAlipaySingleMaxAmount(utils::defaultValue<int>())
    , nAlipayOrdermaxAmount(utils::defaultValue<int>())
    , nCreditMouthMaxAmount(utils::defaultValue<int>())
    , nCreditOrderMaxAmount(utils::defaultValue<int>())
    , nCreditSingleMaxAmount(utils::defaultValue<int>())
    , nDebitMouthMaxAmount(utils::defaultValue<int>())
    , nDebitOrderMaxAmount(utils::defaultValue<int>())
    , nDebitSingleMaxAmount(utils::defaultValue<int>())
    , nMaxCommissionOneTransaction(utils::defaultValue<int>())
    , nCommission(utils::defaultValue<int>())
    , nCommissionDudect(utils::defaultValue<int>())
    , nCommissionByWeixin(utils::defaultValue<int>())
    , nIsBackUpCommission(utils::defaultValue<int>())
    , nBackUpCommission(utils::defaultValue<int>())
    , nBackUpMaxCommissionOneTransaction(utils::defaultValue<int>())
    , nSaasMultiAmountWarnVolume(utils::defaultValue<int>())
    , nSettlementTimeFlag(utils::defaultValue<int>())
    , nActiveDays(utils::defaultValue<int>())
{}

Merchant::Merchant(const Merchant& right)
    : bValid(right.bValid)
    , strMerchantId(right.strMerchantId)
    , strUnionPayMerchantId(right.strUnionPayMerchantId)
    , strMerchantName(right.strMerchantName)
    , strAgentId(right.strAgentId)
    , strTopAgentId(right.strTopAgentId)
    , strMccCode(right.strMccCode)
    , strRealMccCode(right.strRealMccCode)
    , strApplicant(right.strApplicant)
    , strBankArea(right.strBankArea)
    , strBankAccount(right.strBankAccount)
    , strBankCity(right.strBankCity)
    , strbankHolder(right.strbankHolder)
    , strProvince(right.strProvince)
    , strCity(right.strCity)
    , strCreateTime(right.strCreateTime)
    , strStartTimeLimit(right.strStartTimeLimit)
    , strEndTimeLimit(right.strEndTimeLimit)
    , strIdCard(right.strIdCard)
    , strLatitude(right.strLatitude)
    , strLongitude(right.strLongitude)
    , strUnionpayCode(right.strUnionpayCode)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strMobile(right.strMobile)
    , strUserName(right.strUserName)
    , strMerchantKey(right.strMerchantKey)
    , strBankName(right.strBankName)
    , nSpId(right.nSpId)
    , nBankAccountType(right.nBankAccountType)
    , nMiaodaoActivity(right.nMiaodaoActivity)
    , nChannelId(right.nChannelId)
    , nMerchantFlag(right.nMerchantFlag)
    , nPosLevel(right.nPosLevel)
    , nPreauthLevel(right.nPreauthLevel)
    , nPreAuthorizationFlag(right.nPreAuthorizationFlag)
    , nQuickLevel(right.nQuickLevel)
    , nUnionScanLevel(right.nUnionScanLevel)
    , nWxLevel(right.nWxLevel)
    , nState(right.nState)
    , nBitFlag(right.nBitFlag)
    , nMerchantType(right.nMerchantType)
    , nPinfreeState(right.nPinfreeState)
    , nRegisterStatus(right.nRegisterStatus)
    , nPosRefundFlag(right.nPosRefundFlag)
    , nCategory_id(right.nCategory_id)
    , nIsdel(right.nIsdel)
    , nStatus(right.nStatus)
    , nPinfreeLimit(right.nPinfreeLimit)
    , nAlipaySingleMaxAmount(right.nAlipaySingleMaxAmount)
    , nAlipayOrdermaxAmount(right.nAlipayOrdermaxAmount)
    , nCreditMouthMaxAmount(right.nCreditMouthMaxAmount)
    , nCreditOrderMaxAmount(right.nCreditOrderMaxAmount)
    , nCreditSingleMaxAmount(right.nCreditSingleMaxAmount)
    , nDebitMouthMaxAmount(right.nDebitMouthMaxAmount)
    , nDebitOrderMaxAmount(right.nDebitOrderMaxAmount)
    , nDebitSingleMaxAmount(right.nDebitSingleMaxAmount)
    , nMaxCommissionOneTransaction(right.nMaxCommissionOneTransaction)
    , nCommission(right.nCommission)
    , nCommissionDudect(right.nCommissionDudect)
    , nCommissionByWeixin(right.nCommissionByWeixin)
    , nIsBackUpCommission(right.nIsBackUpCommission)
    , nBackUpCommission(right.nBackUpCommission)
    , nBackUpMaxCommissionOneTransaction(right.nBackUpMaxCommissionOneTransaction)
    , nSaasMultiAmountWarnVolume(right.nSaasMultiAmountWarnVolume)
    , nSettlementTimeFlag(right.nSettlementTimeFlag)
    , nActiveDays(right.nActiveDays)
{}

Merchant& Merchant::operator=(const Merchant& right)
{
    bValid = right.bValid;
    strMerchantId = right.strMerchantId;
    strUnionPayMerchantId = right.strUnionPayMerchantId;
    strMerchantName = right.strMerchantName;
    strAgentId = right.strAgentId;
    strTopAgentId = right.strTopAgentId;
    strMccCode = right.strMccCode;
    strRealMccCode = right.strRealMccCode;
    strApplicant = right.strApplicant;
    strBankArea = right.strBankArea;
    strBankAccount = right.strBankAccount;
    strBankCity = right.strBankCity;
    strbankHolder = right.strbankHolder;
    strProvince = right.strProvince;
    strCity = right.strCity;
    strCreateTime = right.strCreateTime;
    strStartTimeLimit = right.strStartTimeLimit;
    strEndTimeLimit = right.strEndTimeLimit;
    strIdCard = right.strIdCard;
    strLatitude = right.strLatitude;
    strLongitude = right.strLongitude;
    strUnionpayCode = right.strUnionpayCode;
    strChannelMerchantId = right.strChannelMerchantId;
    strMobile = right.strMobile;
    strUserName = right.strUserName;
    strMerchantKey = right.strMerchantKey;
    strBankName = right.strBankName;
    nSpId = right.nSpId;
    nBankAccountType = right.nBankAccountType;
    nMiaodaoActivity = right.nMiaodaoActivity;
    nChannelId = right.nChannelId;
    nMerchantFlag = right.nMerchantFlag;
    nPosLevel = right.nPosLevel;
    nPreauthLevel = right.nPreauthLevel;
    nPreAuthorizationFlag = right.nPreAuthorizationFlag;
    nQuickLevel = right.nQuickLevel;
    nUnionScanLevel = right.nUnionScanLevel;
    nWxLevel = right.nWxLevel;
    nState = right.nState;
    nBitFlag = right.nBitFlag;
    nMerchantType = right.nMerchantType;
    nPinfreeState = right.nPinfreeState;
    nRegisterStatus = right.nRegisterStatus;
    nPosRefundFlag = right.nPosRefundFlag;
    nCategory_id = right.nCategory_id;
    nIsdel = right.nIsdel;
    nStatus = right.nStatus;
    nPinfreeLimit = right.nPinfreeLimit;
    nAlipaySingleMaxAmount = right.nAlipaySingleMaxAmount;
    nAlipayOrdermaxAmount = right.nAlipayOrdermaxAmount;
    nCreditMouthMaxAmount = right.nCreditMouthMaxAmount;
    nCreditOrderMaxAmount = right.nCreditOrderMaxAmount;
    nCreditSingleMaxAmount = right.nCreditSingleMaxAmount;
    nDebitMouthMaxAmount = right.nDebitMouthMaxAmount;
    nDebitOrderMaxAmount = right.nDebitOrderMaxAmount;
    nDebitSingleMaxAmount = right.nDebitSingleMaxAmount;
    nMaxCommissionOneTransaction = right.nMaxCommissionOneTransaction;
    nCommission = right.nCommission;
    nCommissionDudect = right.nCommissionDudect;
    nCommissionByWeixin = right.nCommissionByWeixin;
    nIsBackUpCommission = right.nIsBackUpCommission;
    nBackUpCommission = right.nBackUpCommission;
    nBackUpMaxCommissionOneTransaction = right.nBackUpMaxCommissionOneTransaction;
    nSaasMultiAmountWarnVolume = right.nSaasMultiAmountWarnVolume;
    nSettlementTimeFlag = right.nSettlementTimeFlag;
    nActiveDays = right.nActiveDays;
    return *this;
}

void Merchant::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "unionpay_merchant_id", strUnionPayMerchantId);
    utils::getJsonValue(jsonObj, "merchant_name", strMerchantName);
    utils::getJsonValue(jsonObj, "agent_id", strAgentId);
    utils::getJsonValue(jsonObj, "agent_id_1g", strTopAgentId);
    utils::getJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::getJsonValue(jsonObj, "real_mcc_code", strRealMccCode);
    utils::getJsonValue(jsonObj, "applicant", strApplicant);
    utils::getJsonValue(jsonObj, "bank_area", strBankArea);
    utils::getJsonValue(jsonObj, "bank_account", strBankAccount);
    utils::getJsonValue(jsonObj, "bank_city", strBankCity);
    utils::getJsonValue(jsonObj, "bank_holder", strbankHolder);
    utils::getJsonValue(jsonObj, "province", strProvince);
    utils::getJsonValue(jsonObj, "city", strCity);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "start_time_limit", strStartTimeLimit);
    utils::getJsonValue(jsonObj, "end_time_limit", strEndTimeLimit);
    utils::getJsonValue(jsonObj, "idcard", strIdCard);
    utils::getJsonValue(jsonObj, "latitude", strLatitude);
    utils::getJsonValue(jsonObj, "longitude", strLongitude);
    utils::getJsonValue(jsonObj, "unionpay_code", strUnionpayCode);
    utils::getJsonValue(jsonObj, "payment_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "mobile", strMobile);
    utils::getJsonValue(jsonObj, "user_name", strUserName);
    utils::getJsonValue(jsonObj, "bind_merchant_key", strMerchantKey);
    utils::getJsonValue(jsonObj, "bank_name", strBankName);
    utils::getJsonValue(jsonObj, "sp_id", nSpId);
    utils::getJsonValue(jsonObj, "bank_account_type", nBankAccountType);
    utils::getJsonValue(jsonObj, "business_miaodao_activity", nMiaodaoActivity);
    utils::getJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::getJsonValue(jsonObj, "merchant_flag", nMerchantFlag);
    utils::getJsonValue(jsonObj, "privilege_level", nPosLevel);
    utils::getJsonValue(jsonObj, "pre_authorization_level", nPreauthLevel);
    utils::getJsonValue(jsonObj, "pre_authorization_flag", nPreAuthorizationFlag);
    utils::getJsonValue(jsonObj, "quick_payment_pos_level", nQuickLevel);
    utils::getJsonValue(jsonObj, "union_scan_level", nUnionScanLevel);
    utils::getJsonValue(jsonObj, "wx_class", nWxLevel);
    utils::getJsonValue(jsonObj, "state", nState);
    utils::getJsonValue(jsonObj, "bit_flag", nBitFlag);
    utils::getJsonValue(jsonObj, "merchant_type", nMerchantType);
    utils::getJsonValue(jsonObj, "pinfree_state", nPinfreeState);
    utils::getJsonValue(jsonObj, "register_status", nRegisterStatus);
    utils::getJsonValue(jsonObj, "pos_refund_flag", nPosRefundFlag);
    utils::getJsonValue(jsonObj, "category_id", nCategory_id);
    utils::getJsonValue(jsonObj, "isdel", nIsdel);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "pinfree_limit", nPinfreeLimit);
    utils::getJsonValue(jsonObj, "alipay_single_max_amount", nAlipaySingleMaxAmount);
    utils::getJsonValue(jsonObj, "alipay_order_max_amount", nAlipayOrdermaxAmount);
    utils::getJsonValue(jsonObj, "credit_month_max_amount", nCreditMouthMaxAmount);
    utils::getJsonValue(jsonObj, "credit_order_max_amount", nCreditOrderMaxAmount);
    utils::getJsonValue(jsonObj, "credit_single_max_amount", nCreditSingleMaxAmount);
    utils::getJsonValue(jsonObj, "debit_month_max_amount", nDebitMouthMaxAmount);
    utils::getJsonValue(jsonObj, "debit_order_max_amount", nDebitOrderMaxAmount);
    utils::getJsonValue(jsonObj, "debit_single_max_amount", nDebitSingleMaxAmount);
    utils::getJsonValue(jsonObj, "max_commission_one_transaction", nMaxCommissionOneTransaction);
    utils::getJsonValue(jsonObj, "commission", nCommission);
    utils::getJsonValue(jsonObj, "commission_deduct", nCommissionDudect);
    utils::getJsonValue(jsonObj, "commission_by_weixin", nCommissionByWeixin);
    utils::getJsonValue(jsonObj, "is_back_up_commission", nIsBackUpCommission);
    utils::getJsonValue(jsonObj, "back_up_commission", nBackUpCommission);
    utils::getJsonValue(jsonObj, "back_up_max_commission_one_transaction", nBackUpMaxCommissionOneTransaction);
    utils::getJsonValue(jsonObj, "saas_multi_amount_warn_volume", nSaasMultiAmountWarnVolume);
    utils::getJsonValue(jsonObj, "settlement_time_flag", nSettlementTimeFlag);
    utils::getJsonValue(jsonObj, "active_days", nActiveDays);
}

void Merchant::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "unionpay_merchant_id", strUnionPayMerchantId);
    utils::addJsonValue(jsonObj, "merchant_name", strMerchantName);
    utils::addJsonValue(jsonObj, "agent_id", strAgentId);
    utils::addJsonValue(jsonObj, "agent_id_1g", strTopAgentId);
    utils::addJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::addJsonValue(jsonObj, "real_mcc_code", strRealMccCode);
    utils::addJsonValue(jsonObj, "applicant", strApplicant);
    utils::addJsonValue(jsonObj, "bank_area", strBankArea);
    utils::addJsonValue(jsonObj, "bank_account", strBankAccount);
    utils::addJsonValue(jsonObj, "bank_city", strBankCity);
    utils::addJsonValue(jsonObj, "bank_holder", strbankHolder);
    utils::addJsonValue(jsonObj, "province", strProvince);
    utils::addJsonValue(jsonObj, "city", strCity);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "start_time_limit", strStartTimeLimit);
    utils::addJsonValue(jsonObj, "end_time_limit", strEndTimeLimit);
    utils::addJsonValue(jsonObj, "idcard", strIdCard);
    utils::addJsonValue(jsonObj, "latitude", strLatitude);
    utils::addJsonValue(jsonObj, "longitude", strLongitude);
    utils::addJsonValue(jsonObj, "unionpay_code", strUnionpayCode);
    utils::addJsonValue(jsonObj, "payment_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "mobile", strMobile);
    utils::addJsonValue(jsonObj, "user_name", strUserName);
    utils::addJsonValue(jsonObj, "bind_merchant_key", strMerchantKey);
    utils::addJsonValue(jsonObj, "bank_name", strBankName);
    utils::addJsonValue(jsonObj, "sp_id", nSpId);
    utils::addJsonValue(jsonObj, "bank_account_type", nBankAccountType);
    utils::addJsonValue(jsonObj, "business_miaodao_activity", nMiaodaoActivity);
    utils::addJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::addJsonValue(jsonObj, "merchant_flag", nMerchantFlag);
    utils::addJsonValue(jsonObj, "privilege_level", nPosLevel);
    utils::addJsonValue(jsonObj, "pre_authorization_level", nPreauthLevel);
    utils::addJsonValue(jsonObj, "pre_authorization_flag", nPreAuthorizationFlag);
    utils::addJsonValue(jsonObj, "quick_payment_pos_level", nQuickLevel);
    utils::addJsonValue(jsonObj, "union_scan_level", nUnionScanLevel);
    utils::addJsonValue(jsonObj, "wx_class", nWxLevel);
    utils::addJsonValue(jsonObj, "state", nState);
    utils::addJsonValue(jsonObj, "bit_flag", nBitFlag);
    utils::addJsonValue(jsonObj, "merchant_type", nMerchantType);
    utils::addJsonValue(jsonObj, "pinfree_state", nPinfreeState);
    utils::addJsonValue(jsonObj, "register_status", nRegisterStatus);
    utils::addJsonValue(jsonObj, "pos_refund_flag", nPosRefundFlag);
    utils::addJsonValue(jsonObj, "category_id", nCategory_id);
    utils::addJsonValue(jsonObj, "isdel", nIsdel);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "pinfree_limit", nPinfreeLimit);
    utils::addJsonValue(jsonObj, "alipay_single_max_amount", nAlipaySingleMaxAmount);
    utils::addJsonValue(jsonObj, "alipay_order_max_amount", nAlipayOrdermaxAmount);
    utils::addJsonValue(jsonObj, "credit_month_max_amount", nCreditMouthMaxAmount);
    utils::addJsonValue(jsonObj, "credit_order_max_amount", nCreditOrderMaxAmount);
    utils::addJsonValue(jsonObj, "credit_single_max_amount", nCreditSingleMaxAmount);
    utils::addJsonValue(jsonObj, "debit_month_max_amount", nDebitMouthMaxAmount);
    utils::addJsonValue(jsonObj, "debit_order_max_amount", nDebitOrderMaxAmount);
    utils::addJsonValue(jsonObj, "debit_single_max_amount", nDebitSingleMaxAmount);
    utils::addJsonValue(jsonObj, "max_commission_one_transaction", nMaxCommissionOneTransaction);
    utils::addJsonValue(jsonObj, "commission", nCommission);
    utils::addJsonValue(jsonObj, "commission_deduct", nCommissionDudect);
    utils::addJsonValue(jsonObj, "commission_by_weixin", nCommissionByWeixin);
    utils::addJsonValue(jsonObj, "is_back_up_commission", nIsBackUpCommission);
    utils::addJsonValue(jsonObj, "back_up_commission", nBackUpCommission);
    utils::addJsonValue(jsonObj, "back_up_max_commission_one_transaction", nBackUpMaxCommissionOneTransaction);
    utils::addJsonValue(jsonObj, "saas_multi_amount_warn_volume", nSaasMultiAmountWarnVolume);
    utils::addJsonValue(jsonObj, "settlement_time_flag", nSettlementTimeFlag);
    utils::addJsonValue(jsonObj, "active_days", nActiveDays);
}

//////////////////////////////
///MerchantCommission
////////////////////////////////
MerchantCommission::MerchantCommission()
    : bValid(utils::defaultValue<bool>())
    , nPreferentialType(utils::defaultValue<int>())
    , nT1DebitCardCommission(utils::defaultValue<int>())
    , nT1DebitCardMaxFee(utils::defaultValue<int>())
    , nT1CreditCardCommission(utils::defaultValue<int>())
    , nT1OverseasCardCommission(utils::defaultValue<int>())
    , nT0DebitCardCommission(utils::defaultValue<int>())
    , nT0CreditCardCommission(utils::defaultValue<int>())
    , nT0OverseasCardCommission(utils::defaultValue<int>())
    , nT0CommissionFixed(utils::defaultValue<int>())
{}

MerchantCommission::MerchantCommission(const MerchantCommission& right)
    : bValid(right.bValid)
    , strMerchantId(right.strMerchantId)
    , strCreateTime(right.strCreateTime)
    , nPreferentialType(right.nPreferentialType)
    , nT1DebitCardCommission(right.nT1DebitCardCommission)
    , nT1DebitCardMaxFee(right.nT1DebitCardMaxFee)
    , nT1CreditCardCommission(right.nT1CreditCardCommission)
    , nT1OverseasCardCommission(right.nT1OverseasCardCommission)
    , nT0DebitCardCommission(right.nT0DebitCardCommission)
    , nT0CreditCardCommission(right.nT0CreditCardCommission)
    , nT0OverseasCardCommission(right.nT0OverseasCardCommission)
    , nT0CommissionFixed(right.nT0CommissionFixed)
{}

MerchantCommission& MerchantCommission::operator=(const MerchantCommission& right)
{
    bValid = right.bValid;
    strMerchantId = right.strMerchantId;
    strCreateTime = right.strCreateTime;
    nPreferentialType = right.nPreferentialType;
    nT1DebitCardCommission = right.nT1DebitCardCommission;
    nT1DebitCardMaxFee = right.nT1DebitCardMaxFee;
    nT1CreditCardCommission = right.nT1CreditCardCommission;
    nT1OverseasCardCommission = right.nT1OverseasCardCommission;
    nT0DebitCardCommission = right.nT0DebitCardCommission;
    nT0CreditCardCommission = right.nT0CreditCardCommission;
    nT0OverseasCardCommission = right.nT0OverseasCardCommission;
    nT0CommissionFixed = right.nT0CommissionFixed;
    return *this;
}

void MerchantCommission::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::getJsonValue(jsonObj, "t1_debit_card_commission", nT1DebitCardCommission);
    utils::getJsonValue(jsonObj, "t1_debit_card_max_fee", nT1DebitCardMaxFee);
    utils::getJsonValue(jsonObj, "t1_credit_card_commission", nT1CreditCardCommission);
    utils::getJsonValue(jsonObj, "t1_overseas_card_commission", nT1OverseasCardCommission);
    utils::getJsonValue(jsonObj, "t0_debit_card_commission", nT0DebitCardCommission);
    utils::getJsonValue(jsonObj, "t0_credit_card_commission", nT0CreditCardCommission);
    utils::getJsonValue(jsonObj, "t0_overseas_card_commission", nT0OverseasCardCommission);
    utils::getJsonValue(jsonObj, "t0_commission_fixed", nT0CommissionFixed);
}

void MerchantCommission::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::addJsonValue(jsonObj, "t1_debit_card_commission", nT1DebitCardCommission);
    utils::addJsonValue(jsonObj, "t1_debit_card_max_fee", nT1DebitCardMaxFee);
    utils::addJsonValue(jsonObj, "t1_credit_card_commission", nT1CreditCardCommission);
    utils::addJsonValue(jsonObj, "t1_overseas_card_commission", nT1OverseasCardCommission);
    utils::addJsonValue(jsonObj, "t0_debit_card_commission", nT0DebitCardCommission);
    utils::addJsonValue(jsonObj, "t0_credit_card_commission", nT0CreditCardCommission);
    utils::addJsonValue(jsonObj, "t0_overseas_card_commission", nT0OverseasCardCommission);
    utils::addJsonValue(jsonObj, "t0_commission_fixed", nT0CommissionFixed);
}

//////////////////////////////
///MerchantCommissionByPlanId
////////////////////////////////
MerchantCommissionByPlanId::MerchantCommissionByPlanId()
    : bValid(utils::defaultValue<bool>())
    , nPlanId(utils::defaultValue<int>())
    , nRateByMillion(utils::defaultValue<int>())
    , nMaxFeeByMillion(utils::defaultValue<int>())
{}

MerchantCommissionByPlanId::MerchantCommissionByPlanId(const MerchantCommissionByPlanId& right)
    : bValid(right.bValid)
    , nPlanId(right.nPlanId)
    , nRateByMillion(right.nRateByMillion)
    , nMaxFeeByMillion(right.nMaxFeeByMillion)
{}

MerchantCommissionByPlanId& MerchantCommissionByPlanId::operator=(const MerchantCommissionByPlanId& right)
{
    bValid = right.bValid;
    nPlanId = right.nPlanId;
    nRateByMillion = right.nRateByMillion;
    nMaxFeeByMillion = right.nMaxFeeByMillion;
    return *this;
}

void MerchantCommissionByPlanId::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "plan_id", nPlanId);
    utils::getJsonValue(jsonObj, "rate_by_million", nRateByMillion);
    utils::getJsonValue(jsonObj, "max_fee_by_million", nMaxFeeByMillion);
}

void MerchantCommissionByPlanId::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "plan_id", nPlanId);
    utils::addJsonValue(jsonObj, "rate_by_million", nRateByMillion);
    utils::addJsonValue(jsonObj, "max_fee_by_million", nMaxFeeByMillion);
}

//////////////////////////////
///Agent
////////////////////////////////
Agent::Agent()
    : bValid(utils::defaultValue<bool>())
    , nproperty(utils::defaultValue<int>())
    , nAgentType(utils::defaultValue<int>())
    , nAgentClass(utils::defaultValue<int>())
    , nStatus(utils::defaultValue<int>())
    , nProfitRuleType(utils::defaultValue<int>())
{}

Agent::Agent(const Agent& right)
    : bValid(right.bValid)
    , strAgentId(right.strAgentId)
    , strAgentName(right.strAgentName)
    , strParentId(right.strParentId)
    , strThirdPartyPublicKey(right.strThirdPartyPublicKey)
    , nproperty(right.nproperty)
    , nAgentType(right.nAgentType)
    , nAgentClass(right.nAgentClass)
    , nStatus(right.nStatus)
    , nProfitRuleType(right.nProfitRuleType)
    , strCreateTime(right.strCreateTime)
{}

Agent& Agent::operator=(const Agent& right)
{
    bValid = right.bValid;
    strAgentId = right.strAgentId;
    strAgentName = right.strAgentName;
    strParentId = right.strParentId;
    strThirdPartyPublicKey = right.strThirdPartyPublicKey;
    nproperty = right.nproperty;
    nAgentType = right.nAgentType;
    nAgentClass = right.nAgentClass;
    nStatus = right.nStatus;
    nProfitRuleType = right.nProfitRuleType;
    strCreateTime = right.strCreateTime;
    return *this;
}

void Agent::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "agent_id", strAgentId);
    utils::getJsonValue(jsonObj, "agent_name", strAgentName);
    utils::getJsonValue(jsonObj, "agent_parent_id", strParentId);
    utils::getJsonValue(jsonObj, "third_party_public_key", strThirdPartyPublicKey);
    utils::getJsonValue(jsonObj, "property", nproperty);
    utils::getJsonValue(jsonObj, "agent_type", nAgentType);
    utils::getJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "profit_rule_type", nProfitRuleType);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
}

void Agent::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "agent_id", strAgentId);
    utils::addJsonValue(jsonObj, "agent_name", strAgentName);
    utils::addJsonValue(jsonObj, "agent_parent_id", strParentId);
    utils::addJsonValue(jsonObj, "third_party_public_key", strThirdPartyPublicKey);
    utils::addJsonValue(jsonObj, "property", nproperty);
    utils::addJsonValue(jsonObj, "agent_type", nAgentType);
    utils::addJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "profit_rule_type", nProfitRuleType);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
}

//////////////////////////////
///AgentCommission
////////////////////////////////
AgentCommission::AgentCommission()
    : bValid(utils::defaultValue<bool>())
    , nPreferentialType(utils::defaultValue<int>())
    , nT1DebitCommissionBymillion(utils::defaultValue<int>())
    , nT1DebitMaxFeeBymillion(utils::defaultValue<int>())
    , nT1CreditCommissionBymillion(utils::defaultValue<int>())
    , nT1OverseasCommissionBymillion(utils::defaultValue<int>())
    , nT0DebitCommissionBymillion(utils::defaultValue<int>())
    , nT0CreditCommissionBymillion(utils::defaultValue<int>())
    , nT0OverseasCommissionBymillion(utils::defaultValue<int>())
    , nT0DebitBlendCommissionBymillion(utils::defaultValue<int>())
    , nT0CreditBlendCommissionBymillion(utils::defaultValue<int>())
    , nT0OverseasBlendCommissionBymillion(utils::defaultValue<int>())
{}

AgentCommission::AgentCommission(const AgentCommission& right)
    : bValid(right.bValid)
    , strAgentId(right.strAgentId)
    , strStartDate(right.strStartDate)
    , strUpdateTime(right.strUpdateTime)
    , nPreferentialType(right.nPreferentialType)
    , nT1DebitCommissionBymillion(right.nT1DebitCommissionBymillion)
    , nT1DebitMaxFeeBymillion(right.nT1DebitMaxFeeBymillion)
    , nT1CreditCommissionBymillion(right.nT1CreditCommissionBymillion)
    , nT1OverseasCommissionBymillion(right.nT1OverseasCommissionBymillion)
    , nT0DebitCommissionBymillion(right.nT0DebitCommissionBymillion)
    , nT0CreditCommissionBymillion(right.nT0CreditCommissionBymillion)
    , nT0OverseasCommissionBymillion(right.nT0OverseasCommissionBymillion)
    , nT0DebitBlendCommissionBymillion(right.nT0DebitBlendCommissionBymillion)
    , nT0CreditBlendCommissionBymillion(right.nT0CreditBlendCommissionBymillion)
    , nT0OverseasBlendCommissionBymillion(right.nT0OverseasBlendCommissionBymillion)
{}

AgentCommission& AgentCommission::operator=(const AgentCommission& right)
{
    bValid = right.bValid;
    strAgentId = right.strAgentId;
    strStartDate = right.strStartDate;
    strUpdateTime = right.strUpdateTime;
    nPreferentialType = right.nPreferentialType;
    nT1DebitCommissionBymillion = right.nT1DebitCommissionBymillion;
    nT1DebitMaxFeeBymillion = right.nT1DebitMaxFeeBymillion;
    nT1CreditCommissionBymillion = right.nT1CreditCommissionBymillion;
    nT1OverseasCommissionBymillion = right.nT1OverseasCommissionBymillion;
    nT0DebitCommissionBymillion = right.nT0DebitCommissionBymillion;
    nT0CreditCommissionBymillion = right.nT0CreditCommissionBymillion;
    nT0OverseasCommissionBymillion = right.nT0OverseasCommissionBymillion;
    nT0DebitBlendCommissionBymillion = right.nT0DebitBlendCommissionBymillion;
    nT0CreditBlendCommissionBymillion = right.nT0CreditBlendCommissionBymillion;
    nT0OverseasBlendCommissionBymillion = right.nT0OverseasBlendCommissionBymillion;
    return *this;
}

void AgentCommission::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "agent_id", strAgentId);
    utils::getJsonValue(jsonObj, "start_date", strStartDate);
    utils::getJsonValue(jsonObj, "update_time", strUpdateTime);
    utils::getJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::getJsonValue(jsonObj, "t1_debit_commission_bymillion", nT1DebitCommissionBymillion);
    utils::getJsonValue(jsonObj, "t1_debit_max_fee_bymillion", nT1DebitMaxFeeBymillion);
    utils::getJsonValue(jsonObj, "t1_credit_commission_bymillion", nT1CreditCommissionBymillion);
    utils::getJsonValue(jsonObj, "t1_overseas_commission_bymillion", nT1OverseasCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_debit_commission_bymillion", nT0DebitCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_credit_commission_bymillion", nT0CreditCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_overseas_commission_bymillion", nT0OverseasCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_debit_blend_commission_bymillion", nT0DebitBlendCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_credit_blend_commission_bymillion", nT0CreditBlendCommissionBymillion);
    utils::getJsonValue(jsonObj, "t0_overseas_blend_commission_bymillion", nT0OverseasBlendCommissionBymillion);
}

void AgentCommission::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "agent_id", strAgentId);
    utils::addJsonValue(jsonObj, "start_date", strStartDate);
    utils::addJsonValue(jsonObj, "update_time", strUpdateTime);
    utils::addJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::addJsonValue(jsonObj, "t1_debit_commission_bymillion", nT1DebitCommissionBymillion);
    utils::addJsonValue(jsonObj, "t1_debit_max_fee_bymillion", nT1DebitMaxFeeBymillion);
    utils::addJsonValue(jsonObj, "t1_credit_commission_bymillion", nT1CreditCommissionBymillion);
    utils::addJsonValue(jsonObj, "t1_overseas_commission_bymillion", nT1OverseasCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_debit_commission_bymillion", nT0DebitCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_credit_commission_bymillion", nT0CreditCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_overseas_commission_bymillion", nT0OverseasCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_debit_blend_commission_bymillion", nT0DebitBlendCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_credit_blend_commission_bymillion", nT0CreditBlendCommissionBymillion);
    utils::addJsonValue(jsonObj, "t0_overseas_blend_commission_bymillion", nT0OverseasBlendCommissionBymillion);
}

//////////////////////////////
///PinpadCheckin
////////////////////////////////
PinpadCheckin::PinpadCheckin()
    
{}

PinpadCheckin::PinpadCheckin(const PinpadCheckin& right)
    : strPinpadId(right.strPinpadId)
    , strTakByLmk(right.strTakByLmk)
    , strTakByTmk(right.strTakByTmk)
    , strCheckInTime(right.strCheckInTime)
{}

PinpadCheckin& PinpadCheckin::operator=(const PinpadCheckin& right)
{
    strPinpadId = right.strPinpadId;
    strTakByLmk = right.strTakByLmk;
    strTakByTmk = right.strTakByTmk;
    strCheckInTime = right.strCheckInTime;
    return *this;
}

void PinpadCheckin::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "tak_by_lmk", strTakByLmk);
    utils::getJsonValue(jsonObj, "tak_by_tmk", strTakByTmk);
    utils::getJsonValue(jsonObj, "checkin_time", strCheckInTime);
}

void PinpadCheckin::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "tak_by_lmk", strTakByLmk);
    utils::addJsonValue(jsonObj, "tak_by_tmk", strTakByTmk);
    utils::addJsonValue(jsonObj, "checkin_time", strCheckInTime);
}

//////////////////////////////
///pinpad_info
////////////////////////////////
pinpad_info::pinpad_info()
    : bValid(utils::defaultValue<bool>())
    , nHasEncryptor(utils::defaultValue<int>())
    , nState(utils::defaultValue<int>())
{}

pinpad_info::pinpad_info(const pinpad_info& right)
    : bValid(right.bValid)
    , nHasEncryptor(right.nHasEncryptor)
    , nState(right.nState)
    , strPinpadId(right.strPinpadId)
    , strMerchantId(right.strMerchantId)
    , strSerialNum(right.strSerialNum)
    , strTTK(right.strTTK)
    , strTmkByLmk(right.strTmkByLmk)
    , strTpkByTmk(right.strTpkByTmk)
    , strTpkByLmk(right.strTpkByLmk)
    , strPinpadUuid(right.strPinpadUuid)
{}

pinpad_info& pinpad_info::operator=(const pinpad_info& right)
{
    bValid = right.bValid;
    nHasEncryptor = right.nHasEncryptor;
    nState = right.nState;
    strPinpadId = right.strPinpadId;
    strMerchantId = right.strMerchantId;
    strSerialNum = right.strSerialNum;
    strTTK = right.strTTK;
    strTmkByLmk = right.strTmkByLmk;
    strTpkByTmk = right.strTpkByTmk;
    strTpkByLmk = right.strTpkByLmk;
    strPinpadUuid = right.strPinpadUuid;
    return *this;
}

void pinpad_info::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "has_encryptor", nHasEncryptor);
    utils::getJsonValue(jsonObj, "state", nState);
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "serial_number", strSerialNum);
    utils::getJsonValue(jsonObj, "ttk", strTTK);
    utils::getJsonValue(jsonObj, "tmk_by_lmk", strTmkByLmk);
    utils::getJsonValue(jsonObj, "tpk_by_tmk", strTpkByTmk);
    utils::getJsonValue(jsonObj, "tpk_by_lmk", strTpkByLmk);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
}

void pinpad_info::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "has_encryptor", nHasEncryptor);
    utils::addJsonValue(jsonObj, "state", nState);
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "serial_number", strSerialNum);
    utils::addJsonValue(jsonObj, "ttk", strTTK);
    utils::addJsonValue(jsonObj, "tmk_by_lmk", strTmkByLmk);
    utils::addJsonValue(jsonObj, "tpk_by_tmk", strTpkByTmk);
    utils::addJsonValue(jsonObj, "tpk_by_lmk", strTpkByLmk);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
}

//////////////////////////////
///pinpad_uuid_info
////////////////////////////////
pinpad_uuid_info::pinpad_uuid_info()
    : bValid(utils::defaultValue<bool>())
    , nStatus(utils::defaultValue<int>())
    , nMaxUnbindTimes(utils::defaultValue<int>())
    , nEnable(utils::defaultValue<int>())
    , nRepairCounts(utils::defaultValue<int>())
    , nLoadTmkAllowNum(utils::defaultValue<int>())
{}

pinpad_uuid_info::pinpad_uuid_info(const pinpad_uuid_info& right)
    : bValid(right.bValid)
    , nStatus(right.nStatus)
    , nMaxUnbindTimes(right.nMaxUnbindTimes)
    , nEnable(right.nEnable)
    , nRepairCounts(right.nRepairCounts)
    , nLoadTmkAllowNum(right.nLoadTmkAllowNum)
    , strPinpadUuid(right.strPinpadUuid)
    , strPinpadId(right.strPinpadId)
    , strDeviceId(right.strDeviceId)
    , strCreateTime(right.strCreateTime)
    , strStartUsingTime(right.strStartUsingTime)
    , strStartUsingDay(right.strStartUsingDay)
    , strLastRepairTime(right.strLastRepairTime)
    , strSn(right.strSn)
    , strIndustryName(right.strIndustryName)
    , strIndustryModel(right.strIndustryModel)
    , strPinpadCreateTime(right.strPinpadCreateTime)
    , strPinpadCommuication(right.strPinpadCommuication)
    , strPinpadOrganNo(right.strPinpadOrganNo)
    , strPosType(right.strPosType)
    , strIndustryCode(right.strIndustryCode)
    , strStoreTime(right.strStoreTime)
    , strDeliverTime(right.strDeliverTime)
    , strLeshuaModel(right.strLeshuaModel)
    , strAuthCode(right.strAuthCode)
{}

pinpad_uuid_info& pinpad_uuid_info::operator=(const pinpad_uuid_info& right)
{
    bValid = right.bValid;
    nStatus = right.nStatus;
    nMaxUnbindTimes = right.nMaxUnbindTimes;
    nEnable = right.nEnable;
    nRepairCounts = right.nRepairCounts;
    nLoadTmkAllowNum = right.nLoadTmkAllowNum;
    strPinpadUuid = right.strPinpadUuid;
    strPinpadId = right.strPinpadId;
    strDeviceId = right.strDeviceId;
    strCreateTime = right.strCreateTime;
    strStartUsingTime = right.strStartUsingTime;
    strStartUsingDay = right.strStartUsingDay;
    strLastRepairTime = right.strLastRepairTime;
    strSn = right.strSn;
    strIndustryName = right.strIndustryName;
    strIndustryModel = right.strIndustryModel;
    strPinpadCreateTime = right.strPinpadCreateTime;
    strPinpadCommuication = right.strPinpadCommuication;
    strPinpadOrganNo = right.strPinpadOrganNo;
    strPosType = right.strPosType;
    strIndustryCode = right.strIndustryCode;
    strStoreTime = right.strStoreTime;
    strDeliverTime = right.strDeliverTime;
    strLeshuaModel = right.strLeshuaModel;
    strAuthCode = right.strAuthCode;
    return *this;
}

void pinpad_uuid_info::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "max_unbind_times", nMaxUnbindTimes);
    utils::getJsonValue(jsonObj, "enable", nEnable);
    utils::getJsonValue(jsonObj, "repair_counts", nRepairCounts);
    utils::getJsonValue(jsonObj, "load_TMK_allow_num", nLoadTmkAllowNum);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "device_id", strDeviceId);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "start_using_time", strStartUsingTime);
    utils::getJsonValue(jsonObj, "start_using_day", strStartUsingDay);
    utils::getJsonValue(jsonObj, "last_repair_time", strLastRepairTime);
    utils::getJsonValue(jsonObj, "pinpad_sn", strSn);
    utils::getJsonValue(jsonObj, "industry_name", strIndustryName);
    utils::getJsonValue(jsonObj, "industry_model", strIndustryModel);
    utils::getJsonValue(jsonObj, "pinpad_create_time", strPinpadCreateTime);
    utils::getJsonValue(jsonObj, "pinpad_communication", strPinpadCommuication);
    utils::getJsonValue(jsonObj, "pinpad_organization_no", strPinpadOrganNo);
    utils::getJsonValue(jsonObj, "pos_type", strPosType);
    utils::getJsonValue(jsonObj, "industry_code", strIndustryCode);
    utils::getJsonValue(jsonObj, "store_time", strStoreTime);
    utils::getJsonValue(jsonObj, "deliver_time", strDeliverTime);
    utils::getJsonValue(jsonObj, "leshua_model", strLeshuaModel);
    utils::getJsonValue(jsonObj, "authorization_code", strAuthCode);
}

void pinpad_uuid_info::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "max_unbind_times", nMaxUnbindTimes);
    utils::addJsonValue(jsonObj, "enable", nEnable);
    utils::addJsonValue(jsonObj, "repair_counts", nRepairCounts);
    utils::addJsonValue(jsonObj, "load_TMK_allow_num", nLoadTmkAllowNum);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "device_id", strDeviceId);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "start_using_time", strStartUsingTime);
    utils::addJsonValue(jsonObj, "start_using_day", strStartUsingDay);
    utils::addJsonValue(jsonObj, "last_repair_time", strLastRepairTime);
    utils::addJsonValue(jsonObj, "pinpad_sn", strSn);
    utils::addJsonValue(jsonObj, "industry_name", strIndustryName);
    utils::addJsonValue(jsonObj, "industry_model", strIndustryModel);
    utils::addJsonValue(jsonObj, "pinpad_create_time", strPinpadCreateTime);
    utils::addJsonValue(jsonObj, "pinpad_communication", strPinpadCommuication);
    utils::addJsonValue(jsonObj, "pinpad_organization_no", strPinpadOrganNo);
    utils::addJsonValue(jsonObj, "pos_type", strPosType);
    utils::addJsonValue(jsonObj, "industry_code", strIndustryCode);
    utils::addJsonValue(jsonObj, "store_time", strStoreTime);
    utils::addJsonValue(jsonObj, "deliver_time", strDeliverTime);
    utils::addJsonValue(jsonObj, "leshua_model", strLeshuaModel);
    utils::addJsonValue(jsonObj, "authorization_code", strAuthCode);
}

//////////////////////////////
///Pinpad
////////////////////////////////
Pinpad::Pinpad()
    
{}

Pinpad::Pinpad(const Pinpad& right)
    : pinpad(right.pinpad)
    , pinpad_uuid(right.pinpad_uuid)
{}

Pinpad& Pinpad::operator=(const Pinpad& right)
{
    pinpad = right.pinpad;
    pinpad_uuid = right.pinpad_uuid;
    return *this;
}

void Pinpad::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pinpad", pinpad);
    utils::getJsonValue(jsonObj, "pinpad_uuid", pinpad_uuid);
}

void Pinpad::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pinpad", pinpad);
    utils::addJsonValue(jsonObj, "pinpad_uuid", pinpad_uuid);
}

//////////////////////////////
///MerchantBindCups
////////////////////////////////
MerchantBindCups::MerchantBindCups()
    : bValid(utils::defaultValue<bool>())
    , nBindType(utils::defaultValue<int>())
    , nBindKey(utils::defaultValue<int>())
{}

MerchantBindCups::MerchantBindCups(const MerchantBindCups& right)
    : bValid(right.bValid)
    , strMerchantId(right.strMerchantId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strShowChannelMerchantId(right.strShowChannelMerchantId)
    , strBindTime(right.strBindTime)
    , nBindType(right.nBindType)
    , nBindKey(right.nBindKey)
{}

MerchantBindCups& MerchantBindCups::operator=(const MerchantBindCups& right)
{
    bValid = right.bValid;
    strMerchantId = right.strMerchantId;
    strChannelMerchantId = right.strChannelMerchantId;
    strShowChannelMerchantId = right.strShowChannelMerchantId;
    strBindTime = right.strBindTime;
    nBindType = right.nBindType;
    nBindKey = right.nBindKey;
    return *this;
}

void MerchantBindCups::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "paychannel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "show_paychannel_merchant_id", strShowChannelMerchantId);
    utils::getJsonValue(jsonObj, "bind_time", strBindTime);
    utils::getJsonValue(jsonObj, "bind_type", nBindType);
    utils::getJsonValue(jsonObj, "bind_key", nBindKey);
}

void MerchantBindCups::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "paychannel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "show_paychannel_merchant_id", strShowChannelMerchantId);
    utils::addJsonValue(jsonObj, "bind_time", strBindTime);
    utils::addJsonValue(jsonObj, "bind_type", nBindType);
    utils::addJsonValue(jsonObj, "bind_key", nBindKey);
}

//////////////////////////////
///CupsMerchant
////////////////////////////////
CupsMerchant::CupsMerchant()
    : bValid(utils::defaultValue<bool>())
    , nHasEncryptor(utils::defaultValue<int>())
    , nCommision(utils::defaultValue<int>())
    , nCommissionExt(utils::defaultValue<int>())
    , nMinCommissionOneTransaction(utils::defaultValue<int>())
    , nMaxCommissionOneTransaction(utils::defaultValue<int>())
    , nCommissionByDebitBymillion(utils::defaultValue<int>())
    , nMinCommissionDebit(utils::defaultValue<int>())
    , nMaxCommissionDebit(utils::defaultValue<int>())
    , nCommissionByCreditBymillion(utils::defaultValue<int>())
    , nMinCommissionCredit(utils::defaultValue<int>())
    , nMaxCommissionCredit(utils::defaultValue<int>())
    , nCommissionByOverseasBymillion(utils::defaultValue<int>())
    , nMinCommissionOverseas(utils::defaultValue<int>())
    , nMaxCommissionOverseas(utils::defaultValue<int>())
    , nPinfreeLimit(utils::defaultValue<int>())
    , nDailyLimit(utils::defaultValue<int>())
    , nPreferentialType(utils::defaultValue<int>())
    , nPinfreeState(utils::defaultValue<int>())
    , nEnable(utils::defaultValue<int>())
    , nContactless(utils::defaultValue<int>())
    , nEnableLimit(utils::defaultValue<int>())
    , nChargingType(utils::defaultValue<int>())
{}

CupsMerchant::CupsMerchant(const CupsMerchant& right)
    : bValid(right.bValid)
    , strCupsId(right.strCupsId)
    , strTerminalId(right.strTerminalId)
    , strMerchantName(right.strMerchantName)
    , strTerminalSn(right.strTerminalSn)
    , strZmk(right.strZmk)
    , strZmkByLmk(right.strZmkByLmk)
    , strMccCode(right.strMccCode)
    , strOrganNo(right.strOrganNo)
    , strSource(right.strSource)
    , strCreateTime(right.strCreateTime)
    , strUpdateTime(right.strUpdateTime)
    , nHasEncryptor(right.nHasEncryptor)
    , nCommision(right.nCommision)
    , nCommissionExt(right.nCommissionExt)
    , nMinCommissionOneTransaction(right.nMinCommissionOneTransaction)
    , nMaxCommissionOneTransaction(right.nMaxCommissionOneTransaction)
    , nCommissionByDebitBymillion(right.nCommissionByDebitBymillion)
    , nMinCommissionDebit(right.nMinCommissionDebit)
    , nMaxCommissionDebit(right.nMaxCommissionDebit)
    , nCommissionByCreditBymillion(right.nCommissionByCreditBymillion)
    , nMinCommissionCredit(right.nMinCommissionCredit)
    , nMaxCommissionCredit(right.nMaxCommissionCredit)
    , nCommissionByOverseasBymillion(right.nCommissionByOverseasBymillion)
    , nMinCommissionOverseas(right.nMinCommissionOverseas)
    , nMaxCommissionOverseas(right.nMaxCommissionOverseas)
    , nPinfreeLimit(right.nPinfreeLimit)
    , nDailyLimit(right.nDailyLimit)
    , nPreferentialType(right.nPreferentialType)
    , nPinfreeState(right.nPinfreeState)
    , nEnable(right.nEnable)
    , nContactless(right.nContactless)
    , nEnableLimit(right.nEnableLimit)
    , nChargingType(right.nChargingType)
{}

CupsMerchant& CupsMerchant::operator=(const CupsMerchant& right)
{
    bValid = right.bValid;
    strCupsId = right.strCupsId;
    strTerminalId = right.strTerminalId;
    strMerchantName = right.strMerchantName;
    strTerminalSn = right.strTerminalSn;
    strZmk = right.strZmk;
    strZmkByLmk = right.strZmkByLmk;
    strMccCode = right.strMccCode;
    strOrganNo = right.strOrganNo;
    strSource = right.strSource;
    strCreateTime = right.strCreateTime;
    strUpdateTime = right.strUpdateTime;
    nHasEncryptor = right.nHasEncryptor;
    nCommision = right.nCommision;
    nCommissionExt = right.nCommissionExt;
    nMinCommissionOneTransaction = right.nMinCommissionOneTransaction;
    nMaxCommissionOneTransaction = right.nMaxCommissionOneTransaction;
    nCommissionByDebitBymillion = right.nCommissionByDebitBymillion;
    nMinCommissionDebit = right.nMinCommissionDebit;
    nMaxCommissionDebit = right.nMaxCommissionDebit;
    nCommissionByCreditBymillion = right.nCommissionByCreditBymillion;
    nMinCommissionCredit = right.nMinCommissionCredit;
    nMaxCommissionCredit = right.nMaxCommissionCredit;
    nCommissionByOverseasBymillion = right.nCommissionByOverseasBymillion;
    nMinCommissionOverseas = right.nMinCommissionOverseas;
    nMaxCommissionOverseas = right.nMaxCommissionOverseas;
    nPinfreeLimit = right.nPinfreeLimit;
    nDailyLimit = right.nDailyLimit;
    nPreferentialType = right.nPreferentialType;
    nPinfreeState = right.nPinfreeState;
    nEnable = right.nEnable;
    nContactless = right.nContactless;
    nEnableLimit = right.nEnableLimit;
    nChargingType = right.nChargingType;
    return *this;
}

void CupsMerchant::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "merchant_id", strCupsId);
    utils::getJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::getJsonValue(jsonObj, "merchant_name", strMerchantName);
    utils::getJsonValue(jsonObj, "terminal_sn", strTerminalSn);
    utils::getJsonValue(jsonObj, "zmk", strZmk);
    utils::getJsonValue(jsonObj, "zmk_by_lmk", strZmkByLmk);
    utils::getJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::getJsonValue(jsonObj, "organization_no", strOrganNo);
    utils::getJsonValue(jsonObj, "source", strSource);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "update_time", strUpdateTime);
    utils::getJsonValue(jsonObj, "has_encryptor", nHasEncryptor);
    utils::getJsonValue(jsonObj, "commission", nCommision);
    utils::getJsonValue(jsonObj, "commission_ext", nCommissionExt);
    utils::getJsonValue(jsonObj, "min_commission_one_transaction", nMinCommissionOneTransaction);
    utils::getJsonValue(jsonObj, "max_commission_one_transaction", nMaxCommissionOneTransaction);
    utils::getJsonValue(jsonObj, "commission_by_debit_bymillion", nCommissionByDebitBymillion);
    utils::getJsonValue(jsonObj, "min_commission_debit", nMinCommissionDebit);
    utils::getJsonValue(jsonObj, "max_commission_debit", nMaxCommissionDebit);
    utils::getJsonValue(jsonObj, "commission_by_credit_bymillion", nCommissionByCreditBymillion);
    utils::getJsonValue(jsonObj, "min_commission_credit", nMinCommissionCredit);
    utils::getJsonValue(jsonObj, "max_commission_credit", nMaxCommissionCredit);
    utils::getJsonValue(jsonObj, "commission_by_overseas_bymillion", nCommissionByOverseasBymillion);
    utils::getJsonValue(jsonObj, "min_commission_overseas", nMinCommissionOverseas);
    utils::getJsonValue(jsonObj, "max_commission_overseas", nMaxCommissionOverseas);
    utils::getJsonValue(jsonObj, "pinfree_limit", nPinfreeLimit);
    utils::getJsonValue(jsonObj, "daily_limit", nDailyLimit);
    utils::getJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::getJsonValue(jsonObj, "pinfree_state", nPinfreeState);
    utils::getJsonValue(jsonObj, "enable", nEnable);
    utils::getJsonValue(jsonObj, "contactless", nContactless);
    utils::getJsonValue(jsonObj, "enable_limit", nEnableLimit);
    utils::getJsonValue(jsonObj, "charging_type", nChargingType);
}

void CupsMerchant::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "merchant_id", strCupsId);
    utils::addJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::addJsonValue(jsonObj, "merchant_name", strMerchantName);
    utils::addJsonValue(jsonObj, "terminal_sn", strTerminalSn);
    utils::addJsonValue(jsonObj, "zmk", strZmk);
    utils::addJsonValue(jsonObj, "zmk_by_lmk", strZmkByLmk);
    utils::addJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::addJsonValue(jsonObj, "organization_no", strOrganNo);
    utils::addJsonValue(jsonObj, "source", strSource);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "update_time", strUpdateTime);
    utils::addJsonValue(jsonObj, "has_encryptor", nHasEncryptor);
    utils::addJsonValue(jsonObj, "commission", nCommision);
    utils::addJsonValue(jsonObj, "commission_ext", nCommissionExt);
    utils::addJsonValue(jsonObj, "min_commission_one_transaction", nMinCommissionOneTransaction);
    utils::addJsonValue(jsonObj, "max_commission_one_transaction", nMaxCommissionOneTransaction);
    utils::addJsonValue(jsonObj, "commission_by_debit_bymillion", nCommissionByDebitBymillion);
    utils::addJsonValue(jsonObj, "min_commission_debit", nMinCommissionDebit);
    utils::addJsonValue(jsonObj, "max_commission_debit", nMaxCommissionDebit);
    utils::addJsonValue(jsonObj, "commission_by_credit_bymillion", nCommissionByCreditBymillion);
    utils::addJsonValue(jsonObj, "min_commission_credit", nMinCommissionCredit);
    utils::addJsonValue(jsonObj, "max_commission_credit", nMaxCommissionCredit);
    utils::addJsonValue(jsonObj, "commission_by_overseas_bymillion", nCommissionByOverseasBymillion);
    utils::addJsonValue(jsonObj, "min_commission_overseas", nMinCommissionOverseas);
    utils::addJsonValue(jsonObj, "max_commission_overseas", nMaxCommissionOverseas);
    utils::addJsonValue(jsonObj, "pinfree_limit", nPinfreeLimit);
    utils::addJsonValue(jsonObj, "daily_limit", nDailyLimit);
    utils::addJsonValue(jsonObj, "preferential_type", nPreferentialType);
    utils::addJsonValue(jsonObj, "pinfree_state", nPinfreeState);
    utils::addJsonValue(jsonObj, "enable", nEnable);
    utils::addJsonValue(jsonObj, "contactless", nContactless);
    utils::addJsonValue(jsonObj, "enable_limit", nEnableLimit);
    utils::addJsonValue(jsonObj, "charging_type", nChargingType);
}

//////////////////////////////
///RouteDetails
////////////////////////////////
RouteDetails::RouteDetails()
    : nBankCardType(utils::defaultValue<int>())
    , nPaychannelId(utils::defaultValue<int>())
    , nTerminalType(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
    , nMerchantPreferentialType(utils::defaultValue<int>())
    , nPaychannelMerchantPreferentialType(utils::defaultValue<int>())
{}

RouteDetails::RouteDetails(const RouteDetails& right)
    : strRegularNo(right.strRegularNo)
    , strMerchantId(right.strMerchantId)
    , strOrderId(right.strOrderId)
    , strTransactionId(right.strTransactionId)
    , strSettlementAccount(right.strSettlementAccount)
    , strPaychannelMerchantId(right.strPaychannelMerchantId)
    , strPaychannelTerminalId(right.strPaychannelTerminalId)
    , strPaychannelMerchantName(right.strPaychannelMerchantName)
    , strTopAgentId(right.strTopAgentId)
    , strPinpadUuid(right.strPinpadUuid)
    , strMerchantOrganId(right.strMerchantOrganId)
    , strMerchantMccCode(right.strMerchantMccCode)
    , strPaychannelMerchantOrganId(right.strPaychannelMerchantOrganId)
    , strPaychannelMerchantMccCode(right.strPaychannelMerchantMccCode)
    , strEncryptCardId(right.strEncryptCardId)
    , nBankCardType(right.nBankCardType)
    , nPaychannelId(right.nPaychannelId)
    , nTerminalType(right.nTerminalType)
    , nAmount(right.nAmount)
    , nMerchantPreferentialType(right.nMerchantPreferentialType)
    , nPaychannelMerchantPreferentialType(right.nPaychannelMerchantPreferentialType)
{}

RouteDetails& RouteDetails::operator=(const RouteDetails& right)
{
    strRegularNo = right.strRegularNo;
    strMerchantId = right.strMerchantId;
    strOrderId = right.strOrderId;
    strTransactionId = right.strTransactionId;
    strSettlementAccount = right.strSettlementAccount;
    strPaychannelMerchantId = right.strPaychannelMerchantId;
    strPaychannelTerminalId = right.strPaychannelTerminalId;
    strPaychannelMerchantName = right.strPaychannelMerchantName;
    strTopAgentId = right.strTopAgentId;
    strPinpadUuid = right.strPinpadUuid;
    strMerchantOrganId = right.strMerchantOrganId;
    strMerchantMccCode = right.strMerchantMccCode;
    strPaychannelMerchantOrganId = right.strPaychannelMerchantOrganId;
    strPaychannelMerchantMccCode = right.strPaychannelMerchantMccCode;
    strEncryptCardId = right.strEncryptCardId;
    nBankCardType = right.nBankCardType;
    nPaychannelId = right.nPaychannelId;
    nTerminalType = right.nTerminalType;
    nAmount = right.nAmount;
    nMerchantPreferentialType = right.nMerchantPreferentialType;
    nPaychannelMerchantPreferentialType = right.nPaychannelMerchantPreferentialType;
    return *this;
}

void RouteDetails::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "regular_no", strRegularNo);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "settlement_account", strSettlementAccount);
    utils::getJsonValue(jsonObj, "paychannel_merchant_id", strPaychannelMerchantId);
    utils::getJsonValue(jsonObj, "paychannel_terminal_id", strPaychannelTerminalId);
    utils::getJsonValue(jsonObj, "paychannel_merchant_name", strPaychannelMerchantName);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::getJsonValue(jsonObj, "merchant_organ_id", strMerchantOrganId);
    utils::getJsonValue(jsonObj, "merchant_mcc_code", strMerchantMccCode);
    utils::getJsonValue(jsonObj, "paychannel_merchant_organ_id", strPaychannelMerchantOrganId);
    utils::getJsonValue(jsonObj, "paychannel_merchant_mcc_code", strPaychannelMerchantMccCode);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "bank_card_type", nBankCardType);
    utils::getJsonValue(jsonObj, "paychannel_id", nPaychannelId);
    utils::getJsonValue(jsonObj, "terminal_type", nTerminalType);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "merchant_preferential_type", nMerchantPreferentialType);
    utils::getJsonValue(jsonObj, "paychannel_merchant_preferential_type", nPaychannelMerchantPreferentialType);
}

void RouteDetails::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "regular_no", strRegularNo);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "settlement_account", strSettlementAccount);
    utils::addJsonValue(jsonObj, "paychannel_merchant_id", strPaychannelMerchantId);
    utils::addJsonValue(jsonObj, "paychannel_terminal_id", strPaychannelTerminalId);
    utils::addJsonValue(jsonObj, "paychannel_merchant_name", strPaychannelMerchantName);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::addJsonValue(jsonObj, "merchant_organ_id", strMerchantOrganId);
    utils::addJsonValue(jsonObj, "merchant_mcc_code", strMerchantMccCode);
    utils::addJsonValue(jsonObj, "paychannel_merchant_organ_id", strPaychannelMerchantOrganId);
    utils::addJsonValue(jsonObj, "paychannel_merchant_mcc_code", strPaychannelMerchantMccCode);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "bank_card_type", nBankCardType);
    utils::addJsonValue(jsonObj, "paychannel_id", nPaychannelId);
    utils::addJsonValue(jsonObj, "terminal_type", nTerminalType);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "merchant_preferential_type", nMerchantPreferentialType);
    utils::addJsonValue(jsonObj, "paychannel_merchant_preferential_type", nPaychannelMerchantPreferentialType);
}

//////////////////////////////
///ChannelPosInfo
////////////////////////////////
ChannelPosInfo::ChannelPosInfo()
    : nChannelCatiStatus(utils::defaultValue<int>())
    , nChannelBusiFlag(utils::defaultValue<int>())
    , nChannelTjBusiFlag(utils::defaultValue<int>())
{}

ChannelPosInfo::ChannelPosInfo(const ChannelPosInfo& right)
    : strPosSn(right.strPosSn)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strChannelAgentId(right.strChannelAgentId)
    , strTerminalId(right.strTerminalId)
    , strTerminalType(right.strTerminalType)
    , nChannelCatiStatus(right.nChannelCatiStatus)
    , nChannelBusiFlag(right.nChannelBusiFlag)
    , nChannelTjBusiFlag(right.nChannelTjBusiFlag)
{}

ChannelPosInfo& ChannelPosInfo::operator=(const ChannelPosInfo& right)
{
    strPosSn = right.strPosSn;
    strChannelMerchantId = right.strChannelMerchantId;
    strChannelAgentId = right.strChannelAgentId;
    strTerminalId = right.strTerminalId;
    strTerminalType = right.strTerminalType;
    nChannelCatiStatus = right.nChannelCatiStatus;
    nChannelBusiFlag = right.nChannelBusiFlag;
    nChannelTjBusiFlag = right.nChannelTjBusiFlag;
    return *this;
}

void ChannelPosInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pos_sn", strPosSn);
    utils::getJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::getJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::getJsonValue(jsonObj, "terminal_type", strTerminalType);
    utils::getJsonValue(jsonObj, "channel_cati_status", nChannelCatiStatus);
    utils::getJsonValue(jsonObj, "channel_busi_flag", nChannelBusiFlag);
    utils::getJsonValue(jsonObj, "channel_tj_business_flag", nChannelTjBusiFlag);
}

void ChannelPosInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pos_sn", strPosSn);
    utils::addJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::addJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::addJsonValue(jsonObj, "terminal_type", strTerminalType);
    utils::addJsonValue(jsonObj, "channel_cati_status", nChannelCatiStatus);
    utils::addJsonValue(jsonObj, "channel_busi_flag", nChannelBusiFlag);
    utils::addJsonValue(jsonObj, "channel_tj_business_flag", nChannelTjBusiFlag);
}

//////////////////////////////
///ChannelMerchantInfo
////////////////////////////////
ChannelMerchantInfo::ChannelMerchantInfo()
    : nChannelMerchantStatus(utils::defaultValue<int>())
    , nChannelMerchantInsuranceFlag(utils::defaultValue<int>())
    , nChannelMerchantDebitT0Flag(utils::defaultValue<int>())
    , nChannelMerchantCreditT0Flag(utils::defaultValue<int>())
    , nChannelMerchantNocturnalT0Flag(utils::defaultValue<int>())
    , nChannelMerchantDebitCardAmountLimit(utils::defaultValue<int>())
    , nChannelMerchantCreditCardAmountLimit(utils::defaultValue<int>())
    , nChannelMerchantToWalletT0Flag(utils::defaultValue<int>())
{}

ChannelMerchantInfo::ChannelMerchantInfo(const ChannelMerchantInfo& right)
    : strChannelAgentId(right.strChannelAgentId)
    , strChannelShopId(right.strChannelShopId)
    , strMerchantId(right.strMerchantId)
    , nChannelMerchantStatus(right.nChannelMerchantStatus)
    , nChannelMerchantInsuranceFlag(right.nChannelMerchantInsuranceFlag)
    , nChannelMerchantDebitT0Flag(right.nChannelMerchantDebitT0Flag)
    , nChannelMerchantCreditT0Flag(right.nChannelMerchantCreditT0Flag)
    , nChannelMerchantNocturnalT0Flag(right.nChannelMerchantNocturnalT0Flag)
    , nChannelMerchantDebitCardAmountLimit(right.nChannelMerchantDebitCardAmountLimit)
    , nChannelMerchantCreditCardAmountLimit(right.nChannelMerchantCreditCardAmountLimit)
    , nChannelMerchantToWalletT0Flag(right.nChannelMerchantToWalletT0Flag)
{}

ChannelMerchantInfo& ChannelMerchantInfo::operator=(const ChannelMerchantInfo& right)
{
    strChannelAgentId = right.strChannelAgentId;
    strChannelShopId = right.strChannelShopId;
    strMerchantId = right.strMerchantId;
    nChannelMerchantStatus = right.nChannelMerchantStatus;
    nChannelMerchantInsuranceFlag = right.nChannelMerchantInsuranceFlag;
    nChannelMerchantDebitT0Flag = right.nChannelMerchantDebitT0Flag;
    nChannelMerchantCreditT0Flag = right.nChannelMerchantCreditT0Flag;
    nChannelMerchantNocturnalT0Flag = right.nChannelMerchantNocturnalT0Flag;
    nChannelMerchantDebitCardAmountLimit = right.nChannelMerchantDebitCardAmountLimit;
    nChannelMerchantCreditCardAmountLimit = right.nChannelMerchantCreditCardAmountLimit;
    nChannelMerchantToWalletT0Flag = right.nChannelMerchantToWalletT0Flag;
    return *this;
}

void ChannelMerchantInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::getJsonValue(jsonObj, "channel_shop_id", strChannelShopId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "channel_merchant_status", nChannelMerchantStatus);
    utils::getJsonValue(jsonObj, "channel_merchant_insurance_flag", nChannelMerchantInsuranceFlag);
    utils::getJsonValue(jsonObj, "channel_merchant_debit_t0_flag", nChannelMerchantDebitT0Flag);
    utils::getJsonValue(jsonObj, "channel_merchant_credit_t0_flag", nChannelMerchantCreditT0Flag);
    utils::getJsonValue(jsonObj, "channel_merchant_nocturnal_t0_flag", nChannelMerchantNocturnalT0Flag);
    utils::getJsonValue(jsonObj, "channel_merchant_debit_card_amount_limit", nChannelMerchantDebitCardAmountLimit);
    utils::getJsonValue(jsonObj, "channel_merchant_credit_card_amount_limit", nChannelMerchantCreditCardAmountLimit);
    utils::getJsonValue(jsonObj, "channel_merchant_to_wallet_t0_flag", nChannelMerchantToWalletT0Flag);
}

void ChannelMerchantInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::addJsonValue(jsonObj, "channel_shop_id", strChannelShopId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "channel_merchant_status", nChannelMerchantStatus);
    utils::addJsonValue(jsonObj, "channel_merchant_insurance_flag", nChannelMerchantInsuranceFlag);
    utils::addJsonValue(jsonObj, "channel_merchant_debit_t0_flag", nChannelMerchantDebitT0Flag);
    utils::addJsonValue(jsonObj, "channel_merchant_credit_t0_flag", nChannelMerchantCreditT0Flag);
    utils::addJsonValue(jsonObj, "channel_merchant_nocturnal_t0_flag", nChannelMerchantNocturnalT0Flag);
    utils::addJsonValue(jsonObj, "channel_merchant_debit_card_amount_limit", nChannelMerchantDebitCardAmountLimit);
    utils::addJsonValue(jsonObj, "channel_merchant_credit_card_amount_limit", nChannelMerchantCreditCardAmountLimit);
    utils::addJsonValue(jsonObj, "channel_merchant_to_wallet_t0_flag", nChannelMerchantToWalletT0Flag);
}

//////////////////////////////
///TransactionInfo
////////////////////////////////
TransactionInfo::TransactionInfo()
    : nPaymentChannelId(utils::defaultValue<int>())
    , nPanType(utils::defaultValue<int>())
    , nPanOverseas(utils::defaultValue<int>())
{}

TransactionInfo::TransactionInfo(const TransactionInfo& right)
    : strPaymentChannelMerchantDd(right.strPaymentChannelMerchantDd)
    , strTransactionId(right.strTransactionId)
    , strTime(right.strTime)
    , nPaymentChannelId(right.nPaymentChannelId)
    , nPanType(right.nPanType)
    , nPanOverseas(right.nPanOverseas)
{}

TransactionInfo& TransactionInfo::operator=(const TransactionInfo& right)
{
    strPaymentChannelMerchantDd = right.strPaymentChannelMerchantDd;
    strTransactionId = right.strTransactionId;
    strTime = right.strTime;
    nPaymentChannelId = right.nPaymentChannelId;
    nPanType = right.nPanType;
    nPanOverseas = right.nPanOverseas;
    return *this;
}

void TransactionInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "payment_channel_merchant_id", strPaymentChannelMerchantDd);
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "time", strTime);
    utils::getJsonValue(jsonObj, "payment_channel_id", nPaymentChannelId);
    utils::getJsonValue(jsonObj, "pan_type", nPanType);
    utils::getJsonValue(jsonObj, "pan_overseas", nPanOverseas);
}

void TransactionInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "payment_channel_merchant_id", strPaymentChannelMerchantDd);
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "time", strTime);
    utils::addJsonValue(jsonObj, "payment_channel_id", nPaymentChannelId);
    utils::addJsonValue(jsonObj, "pan_type", nPanType);
    utils::addJsonValue(jsonObj, "pan_overseas", nPanOverseas);
}

//////////////////////////////
///LeshuaPosOrder
////////////////////////////////
LeshuaPosOrder::LeshuaPosOrder()
    : bValid(utils::defaultValue<bool>())
{}

LeshuaPosOrder::LeshuaPosOrder(const LeshuaPosOrder& right)
    : strPinpadId(right.strPinpadId)
    , strBatchNo(right.strBatchNo)
    , strFlowId(right.strFlowId)
    , strMerchantId(right.strMerchantId)
    , strOrderId(right.strOrderId)
    , strEncryptCardId(right.strEncryptCardId)
    , strCardId(right.strCardId)
    , bValid(right.bValid)
{}

LeshuaPosOrder& LeshuaPosOrder::operator=(const LeshuaPosOrder& right)
{
    strPinpadId = right.strPinpadId;
    strBatchNo = right.strBatchNo;
    strFlowId = right.strFlowId;
    strMerchantId = right.strMerchantId;
    strOrderId = right.strOrderId;
    strEncryptCardId = right.strEncryptCardId;
    strCardId = right.strCardId;
    bValid = right.bValid;
    return *this;
}

void LeshuaPosOrder::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::getJsonValue(jsonObj, "flow_id", strFlowId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "card_id", strCardId);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void LeshuaPosOrder::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::addJsonValue(jsonObj, "flow_id", strFlowId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "card_id", strCardId);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///LeshuaPreAuthOrder
////////////////////////////////
LeshuaPreAuthOrder::LeshuaPreAuthOrder()
    : bValid(utils::defaultValue<bool>())
{}

LeshuaPreAuthOrder::LeshuaPreAuthOrder(const LeshuaPreAuthOrder& right)
    : strPinpadId(right.strPinpadId)
    , strBatchNo(right.strBatchNo)
    , strFlowId(right.strFlowId)
    , strPreAuthCode(right.strPreAuthCode)
    , strMerchantId(right.strMerchantId)
    , strOrderId(right.strOrderId)
    , strEncryptCardId(right.strEncryptCardId)
    , strTrackData(right.strTrackData)
    , strDate(right.strDate)
    , bValid(right.bValid)
{}

LeshuaPreAuthOrder& LeshuaPreAuthOrder::operator=(const LeshuaPreAuthOrder& right)
{
    strPinpadId = right.strPinpadId;
    strBatchNo = right.strBatchNo;
    strFlowId = right.strFlowId;
    strPreAuthCode = right.strPreAuthCode;
    strMerchantId = right.strMerchantId;
    strOrderId = right.strOrderId;
    strEncryptCardId = right.strEncryptCardId;
    strTrackData = right.strTrackData;
    strDate = right.strDate;
    bValid = right.bValid;
    return *this;
}

void LeshuaPreAuthOrder::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::getJsonValue(jsonObj, "flow_id", strFlowId);
    utils::getJsonValue(jsonObj, "pre_auth_code", strPreAuthCode);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "track_data", strTrackData);
    utils::getJsonValue(jsonObj, "date", strDate);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void LeshuaPreAuthOrder::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::addJsonValue(jsonObj, "flow_id", strFlowId);
    utils::addJsonValue(jsonObj, "pre_auth_code", strPreAuthCode);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "track_data", strTrackData);
    utils::addJsonValue(jsonObj, "date", strDate);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///ChannelPosOrder
////////////////////////////////
ChannelPosOrder::ChannelPosOrder()
    
{}

ChannelPosOrder::ChannelPosOrder(const ChannelPosOrder& right)
    : strChannelPosCati(right.strChannelPosCati)
    , strChannelBatchNo(right.strChannelBatchNo)
    , strChannelFlowId(right.strChannelFlowId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strMerchantId(right.strMerchantId)
    , strOrderId(right.strOrderId)
    , strTerminalId(right.strTerminalId)
    , strEncryptCardId(right.strEncryptCardId)
{}

ChannelPosOrder& ChannelPosOrder::operator=(const ChannelPosOrder& right)
{
    strChannelPosCati = right.strChannelPosCati;
    strChannelBatchNo = right.strChannelBatchNo;
    strChannelFlowId = right.strChannelFlowId;
    strChannelMerchantId = right.strChannelMerchantId;
    strMerchantId = right.strMerchantId;
    strOrderId = right.strOrderId;
    strTerminalId = right.strTerminalId;
    strEncryptCardId = right.strEncryptCardId;
    return *this;
}

void ChannelPosOrder::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::getJsonValue(jsonObj, "channel_pos_batch_no", strChannelBatchNo);
    utils::getJsonValue(jsonObj, "channel_pos_flow_id", strChannelFlowId);
    utils::getJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
}

void ChannelPosOrder::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::addJsonValue(jsonObj, "channel_pos_batch_no", strChannelBatchNo);
    utils::addJsonValue(jsonObj, "channel_pos_flow_id", strChannelFlowId);
    utils::addJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "terminal_id", strTerminalId);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
}

//////////////////////////////
///Order
////////////////////////////////
Order::Order()
    : bValid(utils::defaultValue<bool>())
    , nState(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
    , nRefundAmount(utils::defaultValue<int>())
    , nPayMode(utils::defaultValue<int>())
    , nDepositComm(utils::defaultValue<int>())
    , nThirdPlatComm(utils::defaultValue<int>())
    , nPaychannelId(utils::defaultValue<int>())
    , nPanType(utils::defaultValue<int>())
    , nPanClass(utils::defaultValue<int>())
    , nPanProducts(utils::defaultValue<int>())
    , nPanOverseas(utils::defaultValue<int>())
    , nT0Flag(utils::defaultValue<int>())
    , nScanMethod(utils::defaultValue<int>())
    , nDeductPayType(utils::defaultValue<int>())
    , nPaySourceType(utils::defaultValue<int>())
    , nErrorType(utils::defaultValue<int>())
{}

Order::Order(const Order& right)
    : bValid(right.bValid)
    , strOrderId(right.strOrderId)
    , strMerchantId(right.strMerchantId)
    , strUserName(right.strUserName)
    , strGoodsType(right.strGoodsType)
    , strGoodsName(right.strGoodsName)
    , strGoodsDetails(right.strGoodsDetails)
    , strThirdOrderId(right.strThirdOrderId)
    , strReserverParam(right.strReserverParam)
    , strTime(right.strTime)
    , strRoyalty(right.strRoyalty)
    , strVocherId(right.strVocherId)
    , strClientIp(right.strClientIp)
    , strCallbackUrl(right.strCallbackUrl)
    , strMerchantShopNo(right.strMerchantShopNo)
    , strMerchantPosNo(right.strMerchantPosNo)
    , strCustomerId(right.strCustomerId)
    , strVoucherInfo(right.strVoucherInfo)
    , strQrCode(right.strQrCode)
    , strErrorMsg(right.strErrorMsg)
    , strAttach(right.strAttach)
    , nState(right.nState)
    , nAmount(right.nAmount)
    , nRefundAmount(right.nRefundAmount)
    , nPayMode(right.nPayMode)
    , nDepositComm(right.nDepositComm)
    , nThirdPlatComm(right.nThirdPlatComm)
    , nPaychannelId(right.nPaychannelId)
    , nPanType(right.nPanType)
    , nPanClass(right.nPanClass)
    , nPanProducts(right.nPanProducts)
    , nPanOverseas(right.nPanOverseas)
    , nT0Flag(right.nT0Flag)
    , nScanMethod(right.nScanMethod)
    , nDeductPayType(right.nDeductPayType)
    , nPaySourceType(right.nPaySourceType)
    , nErrorType(right.nErrorType)
{}

Order& Order::operator=(const Order& right)
{
    bValid = right.bValid;
    strOrderId = right.strOrderId;
    strMerchantId = right.strMerchantId;
    strUserName = right.strUserName;
    strGoodsType = right.strGoodsType;
    strGoodsName = right.strGoodsName;
    strGoodsDetails = right.strGoodsDetails;
    strThirdOrderId = right.strThirdOrderId;
    strReserverParam = right.strReserverParam;
    strTime = right.strTime;
    strRoyalty = right.strRoyalty;
    strVocherId = right.strVocherId;
    strClientIp = right.strClientIp;
    strCallbackUrl = right.strCallbackUrl;
    strMerchantShopNo = right.strMerchantShopNo;
    strMerchantPosNo = right.strMerchantPosNo;
    strCustomerId = right.strCustomerId;
    strVoucherInfo = right.strVoucherInfo;
    strQrCode = right.strQrCode;
    strErrorMsg = right.strErrorMsg;
    strAttach = right.strAttach;
    nState = right.nState;
    nAmount = right.nAmount;
    nRefundAmount = right.nRefundAmount;
    nPayMode = right.nPayMode;
    nDepositComm = right.nDepositComm;
    nThirdPlatComm = right.nThirdPlatComm;
    nPaychannelId = right.nPaychannelId;
    nPanType = right.nPanType;
    nPanClass = right.nPanClass;
    nPanProducts = right.nPanProducts;
    nPanOverseas = right.nPanOverseas;
    nT0Flag = right.nT0Flag;
    nScanMethod = right.nScanMethod;
    nDeductPayType = right.nDeductPayType;
    nPaySourceType = right.nPaySourceType;
    nErrorType = right.nErrorType;
    return *this;
}

void Order::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "user_name", strUserName);
    utils::getJsonValue(jsonObj, "goods_type", strGoodsType);
    utils::getJsonValue(jsonObj, "goods_name", strGoodsName);
    utils::getJsonValue(jsonObj, "goods_detail", strGoodsDetails);
    utils::getJsonValue(jsonObj, "third_order_id", strThirdOrderId);
    utils::getJsonValue(jsonObj, "reserver_param", strReserverParam);
    utils::getJsonValue(jsonObj, "order_time", strTime);
    utils::getJsonValue(jsonObj, "royalty", strRoyalty);
    utils::getJsonValue(jsonObj, "voucher_id", strVocherId);
    utils::getJsonValue(jsonObj, "client_ip", strClientIp);
    utils::getJsonValue(jsonObj, "callback_url", strCallbackUrl);
    utils::getJsonValue(jsonObj, "merchant_shop_no", strMerchantShopNo);
    utils::getJsonValue(jsonObj, "merchant_pos_no", strMerchantPosNo);
    utils::getJsonValue(jsonObj, "customer_id", strCustomerId);
    utils::getJsonValue(jsonObj, "voucher_info", strVoucherInfo);
    utils::getJsonValue(jsonObj, "qrcode", strQrCode);
    utils::getJsonValue(jsonObj, "error_msg", strErrorMsg);
    utils::getJsonValue(jsonObj, "attach", strAttach);
    utils::getJsonValue(jsonObj, "state", nState);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "nRefundAmount", nRefundAmount);
    utils::getJsonValue(jsonObj, "payment_mode", nPayMode);
    utils::getJsonValue(jsonObj, "nDepositComm", nDepositComm);
    utils::getJsonValue(jsonObj, "nThirdPlatComm", nThirdPlatComm);
    utils::getJsonValue(jsonObj, "payment_channel_id", nPaychannelId);
    utils::getJsonValue(jsonObj, "pan_type", nPanType);
    utils::getJsonValue(jsonObj, "pan_class", nPanClass);
    utils::getJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::getJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::getJsonValue(jsonObj, "t0_flag", nT0Flag);
    utils::getJsonValue(jsonObj, "scan_method", nScanMethod);
    utils::getJsonValue(jsonObj, "deductpay_type", nDeductPayType);
    utils::getJsonValue(jsonObj, "payment_source_type", nPaySourceType);
    utils::getJsonValue(jsonObj, "error_type", nErrorType);
}

void Order::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "user_name", strUserName);
    utils::addJsonValue(jsonObj, "goods_type", strGoodsType);
    utils::addJsonValue(jsonObj, "goods_name", strGoodsName);
    utils::addJsonValue(jsonObj, "goods_detail", strGoodsDetails);
    utils::addJsonValue(jsonObj, "third_order_id", strThirdOrderId);
    utils::addJsonValue(jsonObj, "reserver_param", strReserverParam);
    utils::addJsonValue(jsonObj, "order_time", strTime);
    utils::addJsonValue(jsonObj, "royalty", strRoyalty);
    utils::addJsonValue(jsonObj, "voucher_id", strVocherId);
    utils::addJsonValue(jsonObj, "client_ip", strClientIp);
    utils::addJsonValue(jsonObj, "callback_url", strCallbackUrl);
    utils::addJsonValue(jsonObj, "merchant_shop_no", strMerchantShopNo);
    utils::addJsonValue(jsonObj, "merchant_pos_no", strMerchantPosNo);
    utils::addJsonValue(jsonObj, "customer_id", strCustomerId);
    utils::addJsonValue(jsonObj, "voucher_info", strVoucherInfo);
    utils::addJsonValue(jsonObj, "qrcode", strQrCode);
    utils::addJsonValue(jsonObj, "error_msg", strErrorMsg);
    utils::addJsonValue(jsonObj, "attach", strAttach);
    utils::addJsonValue(jsonObj, "state", nState);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "nRefundAmount", nRefundAmount);
    utils::addJsonValue(jsonObj, "payment_mode", nPayMode);
    utils::addJsonValue(jsonObj, "nDepositComm", nDepositComm);
    utils::addJsonValue(jsonObj, "nThirdPlatComm", nThirdPlatComm);
    utils::addJsonValue(jsonObj, "payment_channel_id", nPaychannelId);
    utils::addJsonValue(jsonObj, "pan_type", nPanType);
    utils::addJsonValue(jsonObj, "pan_class", nPanClass);
    utils::addJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::addJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::addJsonValue(jsonObj, "t0_flag", nT0Flag);
    utils::addJsonValue(jsonObj, "scan_method", nScanMethod);
    utils::addJsonValue(jsonObj, "deductpay_type", nDeductPayType);
    utils::addJsonValue(jsonObj, "payment_source_type", nPaySourceType);
    utils::addJsonValue(jsonObj, "error_type", nErrorType);
}

//////////////////////////////
///Transaction
////////////////////////////////
Transaction::Transaction()
    : bValid(utils::defaultValue<bool>())
    , nAmount(utils::defaultValue<int>())
    , nOperationType(utils::defaultValue<int>())
    , nCardType(utils::defaultValue<int>())
    , nPanType(utils::defaultValue<int>())
    , nPanClass(utils::defaultValue<int>())
    , nPanProducts(utils::defaultValue<int>())
    , nPanOverseas(utils::defaultValue<int>())
    , nNoPwdFlag(utils::defaultValue<int>())
    , nPaychannelId(utils::defaultValue<int>())
    , nApptype(utils::defaultValue<int>())
    , nFlag(utils::defaultValue<int>())
    , nOrderAmount(utils::defaultValue<int>())
    , nCouponAmount(utils::defaultValue<int>())
{}

Transaction::Transaction(const Transaction& right)
    : bValid(right.bValid)
    , strTransactionId(right.strTransactionId)
    , strOrderId(right.strOrderId)
    , strMerchantId(right.strMerchantId)
    , strPinpadId(right.strPinpadId)
    , strLongitude(right.strLongitude)
    , strLatitude(right.strLatitude)
    , strUserName(right.strUserName)
    , nAmount(right.nAmount)
    , nOperationType(right.nOperationType)
    , strTime(right.strTime)
    , strCardId(right.strCardId)
    , strCardBank(right.strCardBank)
    , strCardValid(right.strCardValid)
    , strCardSeqNum(right.strCardSeqNum)
    , strIcField55(right.strIcField55)
    , strIcAid(right.strIcAid)
    , strIcAtc(right.strIcAtc)
    , strIcTc(right.strIcTc)
    , nCardType(right.nCardType)
    , nPanType(right.nPanType)
    , nPanClass(right.nPanClass)
    , nPanProducts(right.nPanProducts)
    , nPanOverseas(right.nPanOverseas)
    , nNoPwdFlag(right.nNoPwdFlag)
    , nPaychannelId(right.nPaychannelId)
    , strChlMerchantId(right.strChlMerchantId)
    , strChlTerminalId(right.strChlTerminalId)
    , nApptype(right.nApptype)
    , strMobileId(right.strMobileId)
    , strChlOrderId(right.strChlOrderId)
    , strChlRefNum(right.strChlRefNum)
    , strChlSettleDate(right.strChlSettleDate)
    , strChlAuthCode(right.strChlAuthCode)
    , strChlBatchNum(right.strChlBatchNum)
    , strChlErrCode(right.strChlErrCode)
    , strThirdTime(right.strThirdTime)
    , strPinpadUuid(right.strPinpadUuid)
    , nFlag(right.nFlag)
    , strEncryptCardId(right.strEncryptCardId)
    , strRecvBankCode(right.strRecvBankCode)
    , strTopAgentId(right.strTopAgentId)
    , strRefundId(right.strRefundId)
    , nOrderAmount(right.nOrderAmount)
    , nCouponAmount(right.nCouponAmount)
    , strChlMcc(right.strChlMcc)
    , strCardHoldSign(right.strCardHoldSign)
{}

Transaction& Transaction::operator=(const Transaction& right)
{
    bValid = right.bValid;
    strTransactionId = right.strTransactionId;
    strOrderId = right.strOrderId;
    strMerchantId = right.strMerchantId;
    strPinpadId = right.strPinpadId;
    strLongitude = right.strLongitude;
    strLatitude = right.strLatitude;
    strUserName = right.strUserName;
    nAmount = right.nAmount;
    nOperationType = right.nOperationType;
    strTime = right.strTime;
    strCardId = right.strCardId;
    strCardBank = right.strCardBank;
    strCardValid = right.strCardValid;
    strCardSeqNum = right.strCardSeqNum;
    strIcField55 = right.strIcField55;
    strIcAid = right.strIcAid;
    strIcAtc = right.strIcAtc;
    strIcTc = right.strIcTc;
    nCardType = right.nCardType;
    nPanType = right.nPanType;
    nPanClass = right.nPanClass;
    nPanProducts = right.nPanProducts;
    nPanOverseas = right.nPanOverseas;
    nNoPwdFlag = right.nNoPwdFlag;
    nPaychannelId = right.nPaychannelId;
    strChlMerchantId = right.strChlMerchantId;
    strChlTerminalId = right.strChlTerminalId;
    nApptype = right.nApptype;
    strMobileId = right.strMobileId;
    strChlOrderId = right.strChlOrderId;
    strChlRefNum = right.strChlRefNum;
    strChlSettleDate = right.strChlSettleDate;
    strChlAuthCode = right.strChlAuthCode;
    strChlBatchNum = right.strChlBatchNum;
    strChlErrCode = right.strChlErrCode;
    strThirdTime = right.strThirdTime;
    strPinpadUuid = right.strPinpadUuid;
    nFlag = right.nFlag;
    strEncryptCardId = right.strEncryptCardId;
    strRecvBankCode = right.strRecvBankCode;
    strTopAgentId = right.strTopAgentId;
    strRefundId = right.strRefundId;
    nOrderAmount = right.nOrderAmount;
    nCouponAmount = right.nCouponAmount;
    strChlMcc = right.strChlMcc;
    strCardHoldSign = right.strCardHoldSign;
    return *this;
}

void Transaction::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::getJsonValue(jsonObj, "longitude", strLongitude);
    utils::getJsonValue(jsonObj, "latitude", strLatitude);
    utils::getJsonValue(jsonObj, "user_name", strUserName);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "operation_type", nOperationType);
    utils::getJsonValue(jsonObj, "time", strTime);
    utils::getJsonValue(jsonObj, "card_id", strCardId);
    utils::getJsonValue(jsonObj, "card_bank", strCardBank);
    utils::getJsonValue(jsonObj, "card_valid", strCardValid);
    utils::getJsonValue(jsonObj, "card_sequence_number", strCardSeqNum);
    utils::getJsonValue(jsonObj, "ic_field_55", strIcField55);
    utils::getJsonValue(jsonObj, "ic_aid", strIcAid);
    utils::getJsonValue(jsonObj, "ic_atc", strIcAtc);
    utils::getJsonValue(jsonObj, "ic_tc", strIcTc);
    utils::getJsonValue(jsonObj, "card_type", nCardType);
    utils::getJsonValue(jsonObj, "pan_type", nPanType);
    utils::getJsonValue(jsonObj, "pan_class", nPanClass);
    utils::getJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::getJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::getJsonValue(jsonObj, "no_passwd_flag", nNoPwdFlag);
    utils::getJsonValue(jsonObj, "payment_channel_id", nPaychannelId);
    utils::getJsonValue(jsonObj, "payment_channel_merchant_id", strChlMerchantId);
    utils::getJsonValue(jsonObj, "payment_channel_terminal_id", strChlTerminalId);
    utils::getJsonValue(jsonObj, "app_type", nApptype);
    utils::getJsonValue(jsonObj, "mobile_id", strMobileId);
    utils::getJsonValue(jsonObj, "channel_order_id", strChlOrderId);
    utils::getJsonValue(jsonObj, "channel_reference_number", strChlRefNum);
    utils::getJsonValue(jsonObj, "channel_settle_date", strChlSettleDate);
    utils::getJsonValue(jsonObj, "channel_authorize_code", strChlAuthCode);
    utils::getJsonValue(jsonObj, "channel_batch_number", strChlBatchNum);
    utils::getJsonValue(jsonObj, "channel_error_code", strChlErrCode);
    utils::getJsonValue(jsonObj, "third_time", strThirdTime);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::getJsonValue(jsonObj, "flag", nFlag);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "receive_bank_code", strRecvBankCode);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::getJsonValue(jsonObj, "merchant_refund_id", strRefundId);
    utils::getJsonValue(jsonObj, "nOrderAmount", nOrderAmount);
    utils::getJsonValue(jsonObj, "nCouponAmount", nCouponAmount);
    utils::getJsonValue(jsonObj, "payment_channel_mcc", strChlMcc);
    utils::getJsonValue(jsonObj, "card_holder_sign", strCardHoldSign);
}

void Transaction::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadId);
    utils::addJsonValue(jsonObj, "longitude", strLongitude);
    utils::addJsonValue(jsonObj, "latitude", strLatitude);
    utils::addJsonValue(jsonObj, "user_name", strUserName);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "operation_type", nOperationType);
    utils::addJsonValue(jsonObj, "time", strTime);
    utils::addJsonValue(jsonObj, "card_id", strCardId);
    utils::addJsonValue(jsonObj, "card_bank", strCardBank);
    utils::addJsonValue(jsonObj, "card_valid", strCardValid);
    utils::addJsonValue(jsonObj, "card_sequence_number", strCardSeqNum);
    utils::addJsonValue(jsonObj, "ic_field_55", strIcField55);
    utils::addJsonValue(jsonObj, "ic_aid", strIcAid);
    utils::addJsonValue(jsonObj, "ic_atc", strIcAtc);
    utils::addJsonValue(jsonObj, "ic_tc", strIcTc);
    utils::addJsonValue(jsonObj, "card_type", nCardType);
    utils::addJsonValue(jsonObj, "pan_type", nPanType);
    utils::addJsonValue(jsonObj, "pan_class", nPanClass);
    utils::addJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::addJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::addJsonValue(jsonObj, "no_passwd_flag", nNoPwdFlag);
    utils::addJsonValue(jsonObj, "payment_channel_id", nPaychannelId);
    utils::addJsonValue(jsonObj, "payment_channel_merchant_id", strChlMerchantId);
    utils::addJsonValue(jsonObj, "payment_channel_terminal_id", strChlTerminalId);
    utils::addJsonValue(jsonObj, "app_type", nApptype);
    utils::addJsonValue(jsonObj, "mobile_id", strMobileId);
    utils::addJsonValue(jsonObj, "channel_order_id", strChlOrderId);
    utils::addJsonValue(jsonObj, "channel_reference_number", strChlRefNum);
    utils::addJsonValue(jsonObj, "channel_settle_date", strChlSettleDate);
    utils::addJsonValue(jsonObj, "channel_authorize_code", strChlAuthCode);
    utils::addJsonValue(jsonObj, "channel_batch_number", strChlBatchNum);
    utils::addJsonValue(jsonObj, "channel_error_code", strChlErrCode);
    utils::addJsonValue(jsonObj, "third_time", strThirdTime);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::addJsonValue(jsonObj, "flag", nFlag);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "receive_bank_code", strRecvBankCode);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::addJsonValue(jsonObj, "merchant_refund_id", strRefundId);
    utils::addJsonValue(jsonObj, "nOrderAmount", nOrderAmount);
    utils::addJsonValue(jsonObj, "nCouponAmount", nCouponAmount);
    utils::addJsonValue(jsonObj, "payment_channel_mcc", strChlMcc);
    utils::addJsonValue(jsonObj, "card_holder_sign", strCardHoldSign);
}

//////////////////////////////
///simpleRisk
////////////////////////////////
simpleRisk::simpleRisk()
    : nAmount(utils::defaultValue<int>())
    , nT0Flag(utils::defaultValue<int>())
    , nChlId(utils::defaultValue<int>())
{}

simpleRisk::simpleRisk(const simpleRisk& right)
    : strOrderId(right.strOrderId)
    , strMerchantId(right.strMerchantId)
    , nAmount(right.nAmount)
    , nT0Flag(right.nT0Flag)
    , nChlId(right.nChlId)
    , strRequest(right.strRequest)
    , strOperationType(right.strOperationType)
{}

simpleRisk& simpleRisk::operator=(const simpleRisk& right)
{
    strOrderId = right.strOrderId;
    strMerchantId = right.strMerchantId;
    nAmount = right.nAmount;
    nT0Flag = right.nT0Flag;
    nChlId = right.nChlId;
    strRequest = right.strRequest;
    strOperationType = right.strOperationType;
    return *this;
}

void simpleRisk::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "t0_flag", nT0Flag);
    utils::getJsonValue(jsonObj, "paychannel_id", nChlId);
    utils::getJsonValue(jsonObj, "data", strRequest);
    utils::getJsonValue(jsonObj, "operation_type", strOperationType);
}

void simpleRisk::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "t0_flag", nT0Flag);
    utils::addJsonValue(jsonObj, "paychannel_id", nChlId);
    utils::addJsonValue(jsonObj, "data", strRequest);
    utils::addJsonValue(jsonObj, "operation_type", strOperationType);
}

//////////////////////////////
///leposParam
////////////////////////////////
leposParam::leposParam()
    : bValid(utils::defaultValue<bool>())
{}

leposParam::leposParam(const leposParam& right)
    : bValid(right.bValid)
    , strKey(right.strKey)
    , strValue(right.strValue)
{}

leposParam& leposParam::operator=(const leposParam& right)
{
    bValid = right.bValid;
    strKey = right.strKey;
    strValue = right.strValue;
    return *this;
}

void leposParam::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "key", strKey);
    utils::getJsonValue(jsonObj, "value", strValue);
}

void leposParam::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "key", strKey);
    utils::addJsonValue(jsonObj, "value", strValue);
}

//////////////////////////////
///mccInfo
////////////////////////////////
mccInfo::mccInfo()
    : bValid(utils::defaultValue<bool>())
    , nMccType(utils::defaultValue<int>())
    , nDailyLimit(utils::defaultValue<int>())
    , nPinFreeFlag(utils::defaultValue<int>())
{}

mccInfo::mccInfo(const mccInfo& right)
    : bValid(right.bValid)
    , strMccCode(right.strMccCode)
    , strFatherMccCode(right.strFatherMccCode)
    , strGrandpaMccCode(right.strGrandpaMccCode)
    , nMccType(right.nMccType)
    , nDailyLimit(right.nDailyLimit)
    , nPinFreeFlag(right.nPinFreeFlag)
{}

mccInfo& mccInfo::operator=(const mccInfo& right)
{
    bValid = right.bValid;
    strMccCode = right.strMccCode;
    strFatherMccCode = right.strFatherMccCode;
    strGrandpaMccCode = right.strGrandpaMccCode;
    nMccType = right.nMccType;
    nDailyLimit = right.nDailyLimit;
    nPinFreeFlag = right.nPinFreeFlag;
    return *this;
}

void mccInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::getJsonValue(jsonObj, "father_mcc_code", strFatherMccCode);
    utils::getJsonValue(jsonObj, "grandpa_mcc_code", strGrandpaMccCode);
    utils::getJsonValue(jsonObj, "mcc_type", nMccType);
    utils::getJsonValue(jsonObj, "daily_limit", nDailyLimit);
    utils::getJsonValue(jsonObj, "no_pin_flag", nPinFreeFlag);
}

void mccInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::addJsonValue(jsonObj, "father_mcc_code", strFatherMccCode);
    utils::addJsonValue(jsonObj, "grandpa_mcc_code", strGrandpaMccCode);
    utils::addJsonValue(jsonObj, "mcc_type", nMccType);
    utils::addJsonValue(jsonObj, "daily_limit", nDailyLimit);
    utils::addJsonValue(jsonObj, "no_pin_flag", nPinFreeFlag);
}

//////////////////////////////
///offlineOrder
////////////////////////////////
offlineOrder::offlineOrder()
    : bValid(utils::defaultValue<bool>())
    , nAmount(utils::defaultValue<int>())
{}

offlineOrder::offlineOrder(const offlineOrder& right)
    : bValid(right.bValid)
    , strField55(right.strField55)
    , strOrderId(right.strOrderId)
    , strMerchantId(right.strMerchantId)
    , strPinpadUuid(right.strPinpadUuid)
    , nAmount(right.nAmount)
{}

offlineOrder& offlineOrder::operator=(const offlineOrder& right)
{
    bValid = right.bValid;
    strField55 = right.strField55;
    strOrderId = right.strOrderId;
    strMerchantId = right.strMerchantId;
    strPinpadUuid = right.strPinpadUuid;
    nAmount = right.nAmount;
    return *this;
}

void offlineOrder::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "field_55", strField55);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
}

void offlineOrder::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "field_55", strField55);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUuid);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
}

//////////////////////////////
///offlineParam
////////////////////////////////
offlineParam::offlineParam()
    : bValid(utils::defaultValue<bool>())
    , nOfflineMerchantWhitelstFlag(utils::defaultValue<int>())
{}

offlineParam::offlineParam(const offlineParam& right)
    : bValid(right.bValid)
    , nOfflineMerchantWhitelstFlag(right.nOfflineMerchantWhitelstFlag)
    , strOffLowBound(right.strOffLowBound)
{}

offlineParam& offlineParam::operator=(const offlineParam& right)
{
    bValid = right.bValid;
    nOfflineMerchantWhitelstFlag = right.nOfflineMerchantWhitelstFlag;
    strOffLowBound = right.strOffLowBound;
    return *this;
}

void offlineParam::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "is_offline_white_list", nOfflineMerchantWhitelstFlag);
    utils::getJsonValue(jsonObj, "off_low_bound", strOffLowBound);
}

void offlineParam::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "is_offline_white_list", nOfflineMerchantWhitelstFlag);
    utils::addJsonValue(jsonObj, "off_low_bound", strOffLowBound);
}

//////////////////////////////
///merchantFirstPayInfo
////////////////////////////////
merchantFirstPayInfo::merchantFirstPayInfo()
    : bValid(utils::defaultValue<bool>())
    , nAgentClass(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
{}

merchantFirstPayInfo::merchantFirstPayInfo(const merchantFirstPayInfo& right)
    : bValid(right.bValid)
    , strMerchantId(right.strMerchantId)
    , strOrderId(right.strOrderId)
    , strTopAgentId(right.strTopAgentId)
    , strEncryptCardId(right.strEncryptCardId)
    , nAgentClass(right.nAgentClass)
    , nAmount(right.nAmount)
{}

merchantFirstPayInfo& merchantFirstPayInfo::operator=(const merchantFirstPayInfo& right)
{
    bValid = right.bValid;
    strMerchantId = right.strMerchantId;
    strOrderId = right.strOrderId;
    strTopAgentId = right.strTopAgentId;
    strEncryptCardId = right.strEncryptCardId;
    nAgentClass = right.nAgentClass;
    nAmount = right.nAmount;
    return *this;
}

void merchantFirstPayInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
}

void merchantFirstPayInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
}

//////////////////////////////
///pinFreeCard
////////////////////////////////
pinFreeCard::pinFreeCard()
    
{}

pinFreeCard::pinFreeCard(const pinFreeCard& right)
    : strEncryptCardId(right.strEncryptCardId)
    , strCreateTime(right.strCreateTime)
{}

pinFreeCard& pinFreeCard::operator=(const pinFreeCard& right)
{
    strEncryptCardId = right.strEncryptCardId;
    strCreateTime = right.strCreateTime;
    return *this;
}

void pinFreeCard::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
}

void pinFreeCard::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "encrypt_card_id", strEncryptCardId);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
}

//////////////////////////////
///delayInsurace
////////////////////////////////
delayInsurace::delayInsurace()
    : nState(utils::defaultValue<int>())
    , nCompany(utils::defaultValue<int>())
{}

delayInsurace::delayInsurace(const delayInsurace& right)
    : strMerchantId(right.strMerchantId)
    , strTopAgentId(right.strTopAgentId)
    , strOrderId(right.strOrderId)
    , nState(right.nState)
    , nCompany(right.nCompany)
{}

delayInsurace& delayInsurace::operator=(const delayInsurace& right)
{
    strMerchantId = right.strMerchantId;
    strTopAgentId = right.strTopAgentId;
    strOrderId = right.strOrderId;
    nState = right.nState;
    nCompany = right.nCompany;
    return *this;
}

void delayInsurace::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "state", nState);
    utils::getJsonValue(jsonObj, "company", nCompany);
}

void delayInsurace::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "state", nState);
    utils::addJsonValue(jsonObj, "company", nCompany);
}

//////////////////////////////
///channelTransaction
////////////////////////////////
channelTransaction::channelTransaction()
    : nChannelId(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
    , nOperationType(utils::defaultValue<int>())
{}

channelTransaction::channelTransaction(const channelTransaction& right)
    : strTransactionId(right.strTransactionId)
    , nChannelId(right.nChannelId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strChannelTerminalId(right.strChannelTerminalId)
    , nAmount(right.nAmount)
    , nOperationType(right.nOperationType)
    , strTime(right.strTime)
    , strThirdTime(right.strThirdTime)
{}

channelTransaction& channelTransaction::operator=(const channelTransaction& right)
{
    strTransactionId = right.strTransactionId;
    nChannelId = right.nChannelId;
    strChannelMerchantId = right.strChannelMerchantId;
    strChannelTerminalId = right.strChannelTerminalId;
    nAmount = right.nAmount;
    nOperationType = right.nOperationType;
    strTime = right.strTime;
    strThirdTime = right.strThirdTime;
    return *this;
}

void channelTransaction::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::getJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "operation_type", nOperationType);
    utils::getJsonValue(jsonObj, "time", strTime);
    utils::getJsonValue(jsonObj, "third_time", strThirdTime);
}

void channelTransaction::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::addJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "operation_type", nOperationType);
    utils::addJsonValue(jsonObj, "time", strTime);
    utils::addJsonValue(jsonObj, "third_time", strThirdTime);
}

//////////////////////////////
///merchantTransaction
////////////////////////////////
merchantTransaction::merchantTransaction()
    : nChannelId(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
    , nOperationType(utils::defaultValue<int>())
    , nTradeStatus(utils::defaultValue<int>())
    , nCardType(utils::defaultValue<int>())
    , nPanType(utils::defaultValue<int>())
    , nPanClass(utils::defaultValue<int>())
    , nPanProducts(utils::defaultValue<int>())
    , nPanOverseas(utils::defaultValue<int>())
    , nFlag(utils::defaultValue<int>())
    , nPaySource(utils::defaultValue<int>())
    , nDeductType(utils::defaultValue<int>())
{}

merchantTransaction::merchantTransaction(const merchantTransaction& right)
    : strTransactionId(right.strTransactionId)
    , nChannelId(right.nChannelId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strChannelTerminalId(right.strChannelTerminalId)
    , strOrderId(right.strOrderId)
    , strMerchantId(right.strMerchantId)
    , nAmount(right.nAmount)
    , nOperationType(right.nOperationType)
    , nTradeStatus(right.nTradeStatus)
    , strTime(right.strTime)
    , strThirdTime(right.strThirdTime)
    , strThirdChannelSettleDate(right.strThirdChannelSettleDate)
    , nCardType(right.nCardType)
    , nPanType(right.nPanType)
    , nPanClass(right.nPanClass)
    , nPanProducts(right.nPanProducts)
    , nPanOverseas(right.nPanOverseas)
    , nFlag(right.nFlag)
    , nPaySource(right.nPaySource)
    , nDeductType(right.nDeductType)
    , strVoucherInfo(right.strVoucherInfo)
{}

merchantTransaction& merchantTransaction::operator=(const merchantTransaction& right)
{
    strTransactionId = right.strTransactionId;
    nChannelId = right.nChannelId;
    strChannelMerchantId = right.strChannelMerchantId;
    strChannelTerminalId = right.strChannelTerminalId;
    strOrderId = right.strOrderId;
    strMerchantId = right.strMerchantId;
    nAmount = right.nAmount;
    nOperationType = right.nOperationType;
    nTradeStatus = right.nTradeStatus;
    strTime = right.strTime;
    strThirdTime = right.strThirdTime;
    strThirdChannelSettleDate = right.strThirdChannelSettleDate;
    nCardType = right.nCardType;
    nPanType = right.nPanType;
    nPanClass = right.nPanClass;
    nPanProducts = right.nPanProducts;
    nPanOverseas = right.nPanOverseas;
    nFlag = right.nFlag;
    nPaySource = right.nPaySource;
    nDeductType = right.nDeductType;
    strVoucherInfo = right.strVoucherInfo;
    return *this;
}

void merchantTransaction::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::getJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "amount", nAmount);
    utils::getJsonValue(jsonObj, "operation_type", nOperationType);
    utils::getJsonValue(jsonObj, "trade_status", nTradeStatus);
    utils::getJsonValue(jsonObj, "time", strTime);
    utils::getJsonValue(jsonObj, "third_time", strThirdTime);
    utils::getJsonValue(jsonObj, "third_channel_settle_date", strThirdChannelSettleDate);
    utils::getJsonValue(jsonObj, "card_type", nCardType);
    utils::getJsonValue(jsonObj, "pan_type", nPanType);
    utils::getJsonValue(jsonObj, "pan_class", nPanClass);
    utils::getJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::getJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::getJsonValue(jsonObj, "flag", nFlag);
    utils::getJsonValue(jsonObj, "payment_source_type", nPaySource);
    utils::getJsonValue(jsonObj, "deductpay_type", nDeductType);
    utils::getJsonValue(jsonObj, "voucher_info", strVoucherInfo);
}

void merchantTransaction::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::addJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "amount", nAmount);
    utils::addJsonValue(jsonObj, "operation_type", nOperationType);
    utils::addJsonValue(jsonObj, "trade_status", nTradeStatus);
    utils::addJsonValue(jsonObj, "time", strTime);
    utils::addJsonValue(jsonObj, "third_time", strThirdTime);
    utils::addJsonValue(jsonObj, "third_channel_settle_date", strThirdChannelSettleDate);
    utils::addJsonValue(jsonObj, "card_type", nCardType);
    utils::addJsonValue(jsonObj, "pan_type", nPanType);
    utils::addJsonValue(jsonObj, "pan_class", nPanClass);
    utils::addJsonValue(jsonObj, "pan_products", nPanProducts);
    utils::addJsonValue(jsonObj, "pan_overseas", nPanOverseas);
    utils::addJsonValue(jsonObj, "flag", nFlag);
    utils::addJsonValue(jsonObj, "payment_source_type", nPaySource);
    utils::addJsonValue(jsonObj, "deductpay_type", nDeductType);
    utils::addJsonValue(jsonObj, "voucher_info", strVoucherInfo);
}

//////////////////////////////
///holdTransaction
////////////////////////////////
holdTransaction::holdTransaction()
    : nChannelId(utils::defaultValue<int>())
    , nAmount(utils::defaultValue<int>())
    , nOperationType(utils::defaultValue<int>())
{}

holdTransaction::holdTransaction(const holdTransaction& right)
    : strTransactionId(right.strTransactionId)
    , strMerchantId(right.strMerchantId)
    , nChannelId(right.nChannelId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strChannelTerminalId(right.strChannelTerminalId)
    , nAmount(right.nAmount)
    , nOperationType(right.nOperationType)
    , strTime(right.strTime)
{}

holdTransaction& holdTransaction::operator=(const holdTransaction& right)
{
    strTransactionId = right.strTransactionId;
    strMerchantId = right.strMerchantId;
    nChannelId = right.nChannelId;
    strChannelMerchantId = right.strChannelMerchantId;
    strChannelTerminalId = right.strChannelTerminalId;
    nAmount = right.nAmount;
    nOperationType = right.nOperationType;
    strTime = right.strTime;
    return *this;
}

void holdTransaction::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::getJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::getJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::getJsonValue(jsonObj, "nAmount", nAmount);
    utils::getJsonValue(jsonObj, "operation_type", nOperationType);
    utils::getJsonValue(jsonObj, "time", strTime);
}

void holdTransaction::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantId);
    utils::addJsonValue(jsonObj, "payment_channel_id", nChannelId);
    utils::addJsonValue(jsonObj, "payment_channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "payment_channel_terminal_id", strChannelTerminalId);
    utils::addJsonValue(jsonObj, "nAmount", nAmount);
    utils::addJsonValue(jsonObj, "operation_type", nOperationType);
    utils::addJsonValue(jsonObj, "time", strTime);
}

//////////////////////////////
///orderExternInfo
////////////////////////////////
orderExternInfo::orderExternInfo()
    : nPinAndSignFreeFlag(utils::defaultValue<int>())
    , nYunShanFuFlag(utils::defaultValue<int>())
{}

orderExternInfo::orderExternInfo(const orderExternInfo& right)
    : strOrderID(right.strOrderID)
    , nPinAndSignFreeFlag(right.nPinAndSignFreeFlag)
    , nYunShanFuFlag(right.nYunShanFuFlag)
{}

orderExternInfo& orderExternInfo::operator=(const orderExternInfo& right)
{
    strOrderID = right.strOrderID;
    nPinAndSignFreeFlag = right.nPinAndSignFreeFlag;
    nYunShanFuFlag = right.nYunShanFuFlag;
    return *this;
}

void orderExternInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "order_id", strOrderID);
    utils::getJsonValue(jsonObj, "pin_and_sign_free_flag", nPinAndSignFreeFlag);
    utils::getJsonValue(jsonObj, "yunshanfu_flag", nYunShanFuFlag);
}

void orderExternInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "order_id", strOrderID);
    utils::addJsonValue(jsonObj, "pin_and_sign_free_flag", nPinAndSignFreeFlag);
    utils::addJsonValue(jsonObj, "yunshanfu_flag", nYunShanFuFlag);
}

//////////////////////////////
///leposOrganization
////////////////////////////////
leposOrganization::leposOrganization()
    : bValid(utils::defaultValue<bool>())
    , nCupsBlackRegionFlag(utils::defaultValue<int>())
{}

leposOrganization::leposOrganization(const leposOrganization& right)
    : bValid(right.bValid)
    , strOrganizationNo(right.strOrganizationNo)
    , strUseOrganizationNo(right.strUseOrganizationNo)
    , strProvince(right.strProvince)
    , strCity(right.strCity)
    , strCounty(right.strCounty)
    , strAlias(right.strAlias)
    , nCupsBlackRegionFlag(right.nCupsBlackRegionFlag)
{}

leposOrganization& leposOrganization::operator=(const leposOrganization& right)
{
    bValid = right.bValid;
    strOrganizationNo = right.strOrganizationNo;
    strUseOrganizationNo = right.strUseOrganizationNo;
    strProvince = right.strProvince;
    strCity = right.strCity;
    strCounty = right.strCounty;
    strAlias = right.strAlias;
    nCupsBlackRegionFlag = right.nCupsBlackRegionFlag;
    return *this;
}

void leposOrganization::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bValid", bValid);
    utils::getJsonValue(jsonObj, "organization_no", strOrganizationNo);
    utils::getJsonValue(jsonObj, "use_organization_no", strUseOrganizationNo);
    utils::getJsonValue(jsonObj, "province", strProvince);
    utils::getJsonValue(jsonObj, "city", strCity);
    utils::getJsonValue(jsonObj, "county", strCounty);
    utils::getJsonValue(jsonObj, "alias", strAlias);
    utils::getJsonValue(jsonObj, "cups_black_region_flag", nCupsBlackRegionFlag);
}

void leposOrganization::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bValid", bValid);
    utils::addJsonValue(jsonObj, "organization_no", strOrganizationNo);
    utils::addJsonValue(jsonObj, "use_organization_no", strUseOrganizationNo);
    utils::addJsonValue(jsonObj, "province", strProvince);
    utils::addJsonValue(jsonObj, "city", strCity);
    utils::addJsonValue(jsonObj, "county", strCounty);
    utils::addJsonValue(jsonObj, "alias", strAlias);
    utils::addJsonValue(jsonObj, "cups_black_region_flag", nCupsBlackRegionFlag);
}

//////////////////////////////
///BankCardBin
////////////////////////////////
BankCardBin::BankCardBin()
    : nCardLength(utils::defaultValue<int>())
    , nContactless(utils::defaultValue<int>())
    , nOversea(utils::defaultValue<int>())
    , nDoubleFree(utils::defaultValue<int>())
{}

BankCardBin::BankCardBin(const BankCardBin& right)
    : strBankId(right.strBankId)
    , strBankName(right.strBankName)
    , strCardType(right.strCardType)
    , strCardBin(right.strCardBin)
    , strFinInstitutionCode(right.strFinInstitutionCode)
    , nCardLength(right.nCardLength)
    , nContactless(right.nContactless)
    , nOversea(right.nOversea)
    , nDoubleFree(right.nDoubleFree)
{}

BankCardBin& BankCardBin::operator=(const BankCardBin& right)
{
    strBankId = right.strBankId;
    strBankName = right.strBankName;
    strCardType = right.strCardType;
    strCardBin = right.strCardBin;
    strFinInstitutionCode = right.strFinInstitutionCode;
    nCardLength = right.nCardLength;
    nContactless = right.nContactless;
    nOversea = right.nOversea;
    nDoubleFree = right.nDoubleFree;
    return *this;
}

void BankCardBin::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "bank_id", strBankId);
    utils::getJsonValue(jsonObj, "bank_name", strBankName);
    utils::getJsonValue(jsonObj, "card_type", strCardType);
    utils::getJsonValue(jsonObj, "card_bin", strCardBin);
    utils::getJsonValue(jsonObj, "fin_institution_code", strFinInstitutionCode);
    utils::getJsonValue(jsonObj, "card_length", nCardLength);
    utils::getJsonValue(jsonObj, "contactless_flag", nContactless);
    utils::getJsonValue(jsonObj, "oversea_flag", nOversea);
    utils::getJsonValue(jsonObj, "double_free_flag", nDoubleFree);
}

void BankCardBin::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "bank_id", strBankId);
    utils::addJsonValue(jsonObj, "bank_name", strBankName);
    utils::addJsonValue(jsonObj, "card_type", strCardType);
    utils::addJsonValue(jsonObj, "card_bin", strCardBin);
    utils::addJsonValue(jsonObj, "fin_institution_code", strFinInstitutionCode);
    utils::addJsonValue(jsonObj, "card_length", nCardLength);
    utils::addJsonValue(jsonObj, "contactless_flag", nContactless);
    utils::addJsonValue(jsonObj, "oversea_flag", nOversea);
    utils::addJsonValue(jsonObj, "double_free_flag", nDoubleFree);
}

//////////////////////////////
///BankInstitutionCode
////////////////////////////////
BankInstitutionCode::BankInstitutionCode()
    
{}

BankInstitutionCode::BankInstitutionCode(const BankInstitutionCode& right)
    : strFinInstitutionCode(right.strFinInstitutionCode)
    , strEnSimpleName(right.strEnSimpleName)
{}

BankInstitutionCode& BankInstitutionCode::operator=(const BankInstitutionCode& right)
{
    strFinInstitutionCode = right.strFinInstitutionCode;
    strEnSimpleName = right.strEnSimpleName;
    return *this;
}

void BankInstitutionCode::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "fin_institution_code", strFinInstitutionCode);
    utils::getJsonValue(jsonObj, "en_simple_name", strEnSimpleName);
}

void BankInstitutionCode::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "fin_institution_code", strFinInstitutionCode);
    utils::addJsonValue(jsonObj, "en_simple_name", strEnSimpleName);
}

//////////////////////////////
///ChannelAgent
////////////////////////////////
ChannelAgent::ChannelAgent()
    : nAgentLevel(utils::defaultValue<int>())
    , nAgentClass(utils::defaultValue<int>())
    , nAgentType(utils::defaultValue<int>())
{}

ChannelAgent::ChannelAgent(const ChannelAgent& right)
    : strAgentId(right.strAgentId)
    , strTopAgentId(right.strTopAgentId)
    , strAgentParentId(right.strAgentParentId)
    , strAllSuperAgentAgentId(right.strAllSuperAgentAgentId)
    , strCoopNo(right.strCoopNo)
    , strAgentName(right.strAgentName)
    , nAgentLevel(right.nAgentLevel)
    , nAgentClass(right.nAgentClass)
    , nAgentType(right.nAgentType)
{}

ChannelAgent& ChannelAgent::operator=(const ChannelAgent& right)
{
    strAgentId = right.strAgentId;
    strTopAgentId = right.strTopAgentId;
    strAgentParentId = right.strAgentParentId;
    strAllSuperAgentAgentId = right.strAllSuperAgentAgentId;
    strCoopNo = right.strCoopNo;
    strAgentName = right.strAgentName;
    nAgentLevel = right.nAgentLevel;
    nAgentClass = right.nAgentClass;
    nAgentType = right.nAgentType;
    return *this;
}

void ChannelAgent::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "agent_id", strAgentId);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::getJsonValue(jsonObj, "agent_parent_id", strAgentParentId);
    utils::getJsonValue(jsonObj, "all_super_agent_id", strAllSuperAgentAgentId);
    utils::getJsonValue(jsonObj, "coop_no", strCoopNo);
    utils::getJsonValue(jsonObj, "agent_name", strAgentName);
    utils::getJsonValue(jsonObj, "agent_level", nAgentLevel);
    utils::getJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::getJsonValue(jsonObj, "agent_type", nAgentType);
}

void ChannelAgent::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "agent_id", strAgentId);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentId);
    utils::addJsonValue(jsonObj, "agent_parent_id", strAgentParentId);
    utils::addJsonValue(jsonObj, "all_super_agent_id", strAllSuperAgentAgentId);
    utils::addJsonValue(jsonObj, "coop_no", strCoopNo);
    utils::addJsonValue(jsonObj, "agent_name", strAgentName);
    utils::addJsonValue(jsonObj, "agent_level", nAgentLevel);
    utils::addJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::addJsonValue(jsonObj, "agent_type", nAgentType);
}

//////////////////////////////
///HappyposAgentWithdrawInfo
////////////////////////////////
HappyposAgentWithdrawInfo::HappyposAgentWithdrawInfo()
    : nUsageType(utils::defaultValue<int>())
{}

HappyposAgentWithdrawInfo::HappyposAgentWithdrawInfo(const HappyposAgentWithdrawInfo& right)
    : strAgentID(right.strAgentID)
    , nUsageType(right.nUsageType)
{}

HappyposAgentWithdrawInfo& HappyposAgentWithdrawInfo::operator=(const HappyposAgentWithdrawInfo& right)
{
    strAgentID = right.strAgentID;
    nUsageType = right.nUsageType;
    return *this;
}

void HappyposAgentWithdrawInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "agent_id", strAgentID);
    utils::getJsonValue(jsonObj, "usage_type", nUsageType);
}

void HappyposAgentWithdrawInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "agent_id", strAgentID);
    utils::addJsonValue(jsonObj, "usage_type", nUsageType);
}

//////////////////////////////
///CardNoMerchantId
////////////////////////////////
CardNoMerchantId::CardNoMerchantId()
    : nChannelId(utils::defaultValue<int>())
    , nStatus(utils::defaultValue<int>())
{}

CardNoMerchantId::CardNoMerchantId(const CardNoMerchantId& right)
    : strCradNo(right.strCradNo)
    , strCustomerId(right.strCustomerId)
    , strCreateTime(right.strCreateTime)
    , strCpsBindId(right.strCpsBindId)
    , nChannelId(right.nChannelId)
    , nStatus(right.nStatus)
    , strUpdateTime(right.strUpdateTime)
{}

CardNoMerchantId& CardNoMerchantId::operator=(const CardNoMerchantId& right)
{
    strCradNo = right.strCradNo;
    strCustomerId = right.strCustomerId;
    strCreateTime = right.strCreateTime;
    strCpsBindId = right.strCpsBindId;
    nChannelId = right.nChannelId;
    nStatus = right.nStatus;
    strUpdateTime = right.strUpdateTime;
    return *this;
}

void CardNoMerchantId::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "card_no", strCradNo);
    utils::getJsonValue(jsonObj, "customer_id", strCustomerId);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "cps_bind_id", strCpsBindId);
    utils::getJsonValue(jsonObj, "channel_id", nChannelId);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "update_time", strUpdateTime);
}

void CardNoMerchantId::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "card_no", strCradNo);
    utils::addJsonValue(jsonObj, "customer_id", strCustomerId);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "cps_bind_id", strCpsBindId);
    utils::addJsonValue(jsonObj, "channel_id", nChannelId);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "update_time", strUpdateTime);
}

//////////////////////////////
///CPolicyParam
////////////////////////////////
CPolicyParam::CPolicyParam()
    : bValid(utils::defaultValue<bool>())
    , nId(utils::defaultValue<int>())
    , nStatus(utils::defaultValue<int>())
{}

CPolicyParam::CPolicyParam(const CPolicyParam& right)
    : bValid(right.bValid)
    , nId(right.nId)
    , strPolicyId(right.strPolicyId)
    , strName(right.strName)
    , strValue(right.strValue)
    , strComment(right.strComment)
    , nStatus(right.nStatus)
    , strUser(right.strUser)
    , strCreateTime(right.strCreateTime)
    , strUpdateTime(right.strUpdateTime)
{}

CPolicyParam& CPolicyParam::operator=(const CPolicyParam& right)
{
    bValid = right.bValid;
    nId = right.nId;
    strPolicyId = right.strPolicyId;
    strName = right.strName;
    strValue = right.strValue;
    strComment = right.strComment;
    nStatus = right.nStatus;
    strUser = right.strUser;
    strCreateTime = right.strCreateTime;
    strUpdateTime = right.strUpdateTime;
    return *this;
}

void CPolicyParam::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "valid", bValid);
    utils::getJsonValue(jsonObj, "id", nId);
    utils::getJsonValue(jsonObj, "policy_id", strPolicyId);
    utils::getJsonValue(jsonObj, "name", strName);
    utils::getJsonValue(jsonObj, "value", strValue);
    utils::getJsonValue(jsonObj, "comment", strComment);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "user", strUser);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "update_time", strUpdateTime);
}

void CPolicyParam::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "valid", bValid);
    utils::addJsonValue(jsonObj, "id", nId);
    utils::addJsonValue(jsonObj, "policy_id", strPolicyId);
    utils::addJsonValue(jsonObj, "name", strName);
    utils::addJsonValue(jsonObj, "value", strValue);
    utils::addJsonValue(jsonObj, "comment", strComment);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "user", strUser);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "update_time", strUpdateTime);
}

//////////////////////////////
///CChannelPosBatchInfo
////////////////////////////////
CChannelPosBatchInfo::CChannelPosBatchInfo()
    
{}

CChannelPosBatchInfo::CChannelPosBatchInfo(const CChannelPosBatchInfo& right)
    : strChannelPosCati(right.strChannelPosCati)
    , strBatchNo(right.strBatchNo)
    , strCheckinTime(right.strCheckinTime)
    , strTime(right.strTime)
{}

CChannelPosBatchInfo& CChannelPosBatchInfo::operator=(const CChannelPosBatchInfo& right)
{
    strChannelPosCati = right.strChannelPosCati;
    strBatchNo = right.strBatchNo;
    strCheckinTime = right.strCheckinTime;
    strTime = right.strTime;
    return *this;
}

void CChannelPosBatchInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::getJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::getJsonValue(jsonObj, "checkin_time", strCheckinTime);
    utils::getJsonValue(jsonObj, "time", strTime);
}

void CChannelPosBatchInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::addJsonValue(jsonObj, "batch_no", strBatchNo);
    utils::addJsonValue(jsonObj, "checkin_time", strCheckinTime);
    utils::addJsonValue(jsonObj, "time", strTime);
}

//////////////////////////////
///CSwipeCardCallbackInfo
////////////////////////////////
CSwipeCardCallbackInfo::CSwipeCardCallbackInfo()
    : nStatus(utils::defaultValue<int>())
    , nCurrentNum(utils::defaultValue<int>())
    , nType(utils::defaultValue<int>())
{}

CSwipeCardCallbackInfo::CSwipeCardCallbackInfo(const CSwipeCardCallbackInfo& right)
    : strOrderId(right.strOrderId)
    , strCallbackUrl(right.strCallbackUrl)
    , strMessageHead(right.strMessageHead)
    , strMessageBody(right.strMessageBody)
    , nStatus(right.nStatus)
    , nCurrentNum(right.nCurrentNum)
    , strStep(right.strStep)
    , strMaxNum(right.strMaxNum)
    , strLastTime(right.strLastTime)
    , strTime(right.strTime)
    , nType(right.nType)
{}

CSwipeCardCallbackInfo& CSwipeCardCallbackInfo::operator=(const CSwipeCardCallbackInfo& right)
{
    strOrderId = right.strOrderId;
    strCallbackUrl = right.strCallbackUrl;
    strMessageHead = right.strMessageHead;
    strMessageBody = right.strMessageBody;
    nStatus = right.nStatus;
    nCurrentNum = right.nCurrentNum;
    strStep = right.strStep;
    strMaxNum = right.strMaxNum;
    strLastTime = right.strLastTime;
    strTime = right.strTime;
    nType = right.nType;
    return *this;
}

void CSwipeCardCallbackInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "callback_url", strCallbackUrl);
    utils::getJsonValue(jsonObj, "message_head", strMessageHead);
    utils::getJsonValue(jsonObj, "message_body", strMessageBody);
    utils::getJsonValue(jsonObj, "status", nStatus);
    utils::getJsonValue(jsonObj, "currnt_num", nCurrentNum);
    utils::getJsonValue(jsonObj, "step", strStep);
    utils::getJsonValue(jsonObj, "max_num", strMaxNum);
    utils::getJsonValue(jsonObj, "last_time", strLastTime);
    utils::getJsonValue(jsonObj, "type", strTime);
    utils::getJsonValue(jsonObj, "nType", nType);
}

void CSwipeCardCallbackInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "callback_url", strCallbackUrl);
    utils::addJsonValue(jsonObj, "message_head", strMessageHead);
    utils::addJsonValue(jsonObj, "message_body", strMessageBody);
    utils::addJsonValue(jsonObj, "status", nStatus);
    utils::addJsonValue(jsonObj, "currnt_num", nCurrentNum);
    utils::addJsonValue(jsonObj, "step", strStep);
    utils::addJsonValue(jsonObj, "max_num", strMaxNum);
    utils::addJsonValue(jsonObj, "last_time", strLastTime);
    utils::addJsonValue(jsonObj, "type", strTime);
    utils::addJsonValue(jsonObj, "nType", nType);
}

//////////////////////////////
///CPosOperation
////////////////////////////////
CPosOperation::CPosOperation()
    : nOperationType(utils::defaultValue<int>())
{}

CPosOperation::CPosOperation(const CPosOperation& right)
    : strChannelPosCati(right.strChannelPosCati)
    , strChannelPosBatchNo(right.strChannelPosBatchNo)
    , strChannelPosFlowId(right.strChannelPosFlowId)
    , strChannelMerchantId(right.strChannelMerchantId)
    , strChannelPosShopId(right.strChannelPosShopId)
    , strChannelAgentId(right.strChannelAgentId)
    , nOperationType(right.nOperationType)
    , strOrderId(right.strOrderId)
    , strTransactionId(right.strTransactionId)
    , strShowCupsId(right.strShowCupsId)
    , strShowCupsName(right.strShowCupsName)
    , strResponseCode(right.strResponseCode)
{}

CPosOperation& CPosOperation::operator=(const CPosOperation& right)
{
    strChannelPosCati = right.strChannelPosCati;
    strChannelPosBatchNo = right.strChannelPosBatchNo;
    strChannelPosFlowId = right.strChannelPosFlowId;
    strChannelMerchantId = right.strChannelMerchantId;
    strChannelPosShopId = right.strChannelPosShopId;
    strChannelAgentId = right.strChannelAgentId;
    nOperationType = right.nOperationType;
    strOrderId = right.strOrderId;
    strTransactionId = right.strTransactionId;
    strShowCupsId = right.strShowCupsId;
    strShowCupsName = right.strShowCupsName;
    strResponseCode = right.strResponseCode;
    return *this;
}

void CPosOperation::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::getJsonValue(jsonObj, "channel_pos_batch_no", strChannelPosBatchNo);
    utils::getJsonValue(jsonObj, "channel_pos_flow_id", strChannelPosFlowId);
    utils::getJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::getJsonValue(jsonObj, "channel_shop_id", strChannelPosShopId);
    utils::getJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::getJsonValue(jsonObj, "operation_type", nOperationType);
    utils::getJsonValue(jsonObj, "order_id", strOrderId);
    utils::getJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::getJsonValue(jsonObj, "show_cups_id", strShowCupsId);
    utils::getJsonValue(jsonObj, "show_cups_name", strShowCupsName);
    utils::getJsonValue(jsonObj, "response_code", strResponseCode);
}

void CPosOperation::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "channel_pos_cati", strChannelPosCati);
    utils::addJsonValue(jsonObj, "channel_pos_batch_no", strChannelPosBatchNo);
    utils::addJsonValue(jsonObj, "channel_pos_flow_id", strChannelPosFlowId);
    utils::addJsonValue(jsonObj, "channel_merchant_id", strChannelMerchantId);
    utils::addJsonValue(jsonObj, "channel_shop_id", strChannelPosShopId);
    utils::addJsonValue(jsonObj, "channel_agent_id", strChannelAgentId);
    utils::addJsonValue(jsonObj, "operation_type", nOperationType);
    utils::addJsonValue(jsonObj, "order_id", strOrderId);
    utils::addJsonValue(jsonObj, "transaction_id", strTransactionId);
    utils::addJsonValue(jsonObj, "show_cups_id", strShowCupsId);
    utils::addJsonValue(jsonObj, "show_cups_name", strShowCupsName);
    utils::addJsonValue(jsonObj, "response_code", strResponseCode);
}

//////////////////////////////
///PosMerchantTradeControlInfo
////////////////////////////////
PosMerchantTradeControlInfo::PosMerchantTradeControlInfo()
    : nAgentClass(utils::defaultValue<int>())
    , nTradeMode(utils::defaultValue<int>())
    , bValid(utils::defaultValue<bool>())
{}

PosMerchantTradeControlInfo::PosMerchantTradeControlInfo(const PosMerchantTradeControlInfo& right)
    : strAgentID(right.strAgentID)
    , strTopAgentID(right.strTopAgentID)
    , strMerchantID(right.strMerchantID)
    , strCreateTime(right.strCreateTime)
    , nAgentClass(right.nAgentClass)
    , nTradeMode(right.nTradeMode)
    , bValid(right.bValid)
{}

PosMerchantTradeControlInfo& PosMerchantTradeControlInfo::operator=(const PosMerchantTradeControlInfo& right)
{
    strAgentID = right.strAgentID;
    strTopAgentID = right.strTopAgentID;
    strMerchantID = right.strMerchantID;
    strCreateTime = right.strCreateTime;
    nAgentClass = right.nAgentClass;
    nTradeMode = right.nTradeMode;
    bValid = right.bValid;
    return *this;
}

void PosMerchantTradeControlInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "agent_id", strAgentID);
    utils::getJsonValue(jsonObj, "top_agent_id", strTopAgentID);
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantID);
    utils::getJsonValue(jsonObj, "create_time", strCreateTime);
    utils::getJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::getJsonValue(jsonObj, "trade_mode", nTradeMode);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void PosMerchantTradeControlInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "agent_id", strAgentID);
    utils::addJsonValue(jsonObj, "top_agent_id", strTopAgentID);
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantID);
    utils::addJsonValue(jsonObj, "create_time", strCreateTime);
    utils::addJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::addJsonValue(jsonObj, "trade_mode", nTradeMode);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///PosMerchantSwitchMccControlInfo
////////////////////////////////
PosMerchantSwitchMccControlInfo::PosMerchantSwitchMccControlInfo()
    : nAgentClass(utils::defaultValue<int>())
    , nStatus(utils::defaultValue<int>())
{}

PosMerchantSwitchMccControlInfo::PosMerchantSwitchMccControlInfo(const PosMerchantSwitchMccControlInfo& right)
    : strMerchantID(right.strMerchantID)
    , strMccCode(right.strMccCode)
    , nAgentClass(right.nAgentClass)
    , nStatus(right.nStatus)
{}

PosMerchantSwitchMccControlInfo& PosMerchantSwitchMccControlInfo::operator=(const PosMerchantSwitchMccControlInfo& right)
{
    strMerchantID = right.strMerchantID;
    strMccCode = right.strMccCode;
    nAgentClass = right.nAgentClass;
    nStatus = right.nStatus;
    return *this;
}

void PosMerchantSwitchMccControlInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "merchant_id", strMerchantID);
    utils::getJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::getJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::getJsonValue(jsonObj, "status", nStatus);
}

void PosMerchantSwitchMccControlInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "merchant_id", strMerchantID);
    utils::addJsonValue(jsonObj, "mcc_code", strMccCode);
    utils::addJsonValue(jsonObj, "agent_class", nAgentClass);
    utils::addJsonValue(jsonObj, "status", nStatus);
}

//////////////////////////////
///CpsBusinessConfigInfo
////////////////////////////////
CpsBusinessConfigInfo::CpsBusinessConfigInfo()
    : nBusinessYype(utils::defaultValue<int>())
    , isCps(utils::defaultValue<int>())
    , isYkpay(utils::defaultValue<int>())
    , isPos2cps(utils::defaultValue<int>())
{}

CpsBusinessConfigInfo::CpsBusinessConfigInfo(const CpsBusinessConfigInfo& right)
    : nBusinessYype(right.nBusinessYype)
    , strModel(right.strModel)
    , strParentId(right.strParentId)
    , strPayType(right.strPayType)
    , strPaymentSource(right.strPaymentSource)
    , isCps(right.isCps)
    , isYkpay(right.isYkpay)
    , isPos2cps(right.isPos2cps)
    , strAppTypes(right.strAppTypes)
{}

CpsBusinessConfigInfo& CpsBusinessConfigInfo::operator=(const CpsBusinessConfigInfo& right)
{
    nBusinessYype = right.nBusinessYype;
    strModel = right.strModel;
    strParentId = right.strParentId;
    strPayType = right.strPayType;
    strPaymentSource = right.strPaymentSource;
    isCps = right.isCps;
    isYkpay = right.isYkpay;
    isPos2cps = right.isPos2cps;
    strAppTypes = right.strAppTypes;
    return *this;
}

void CpsBusinessConfigInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "business_type", nBusinessYype);
    utils::getJsonValue(jsonObj, "model", strModel);
    utils::getJsonValue(jsonObj, "partner_id", strParentId);
    utils::getJsonValue(jsonObj, "pay_type", strPayType);
    utils::getJsonValue(jsonObj, "payment_source_type", strPaymentSource);
    utils::getJsonValue(jsonObj, "is_cps", isCps);
    utils::getJsonValue(jsonObj, "is_ykpay", isYkpay);
    utils::getJsonValue(jsonObj, "is_pos2cps", isPos2cps);
    utils::getJsonValue(jsonObj, "app_types", strAppTypes);
}

void CpsBusinessConfigInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "business_type", nBusinessYype);
    utils::addJsonValue(jsonObj, "model", strModel);
    utils::addJsonValue(jsonObj, "partner_id", strParentId);
    utils::addJsonValue(jsonObj, "pay_type", strPayType);
    utils::addJsonValue(jsonObj, "payment_source_type", strPaymentSource);
    utils::addJsonValue(jsonObj, "is_cps", isCps);
    utils::addJsonValue(jsonObj, "is_ykpay", isYkpay);
    utils::addJsonValue(jsonObj, "is_pos2cps", isPos2cps);
    utils::addJsonValue(jsonObj, "app_types", strAppTypes);
}

//////////////////////////////
///IsoPosInfo
////////////////////////////////
IsoPosInfo::IsoPosInfo()
    : nBatchNo(utils::defaultValue<int>())
    , nFlowID(utils::defaultValue<int>())
    , nRefNo(utils::defaultValue<int>())
    , bValid(utils::defaultValue<bool>())
{}

IsoPosInfo::IsoPosInfo(const IsoPosInfo& right)
    : strPinpadID(right.strPinpadID)
    , strPinpadUUID(right.strPinpadUUID)
    , strTime(right.strTime)
    , strPosType(right.strPosType)
    , strVersion(right.strVersion)
    , nBatchNo(right.nBatchNo)
    , nFlowID(right.nFlowID)
    , nRefNo(right.nRefNo)
    , bValid(right.bValid)
{}

IsoPosInfo& IsoPosInfo::operator=(const IsoPosInfo& right)
{
    strPinpadID = right.strPinpadID;
    strPinpadUUID = right.strPinpadUUID;
    strTime = right.strTime;
    strPosType = right.strPosType;
    strVersion = right.strVersion;
    nBatchNo = right.nBatchNo;
    nFlowID = right.nFlowID;
    nRefNo = right.nRefNo;
    bValid = right.bValid;
    return *this;
}

void IsoPosInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "pinpad_id", strPinpadID);
    utils::getJsonValue(jsonObj, "pinpad_uuid", strPinpadUUID);
    utils::getJsonValue(jsonObj, "time", strTime);
    utils::getJsonValue(jsonObj, "pos_type", strPosType);
    utils::getJsonValue(jsonObj, "version", strVersion);
    utils::getJsonValue(jsonObj, "batch_no", nBatchNo);
    utils::getJsonValue(jsonObj, "flow_id", nFlowID);
    utils::getJsonValue(jsonObj, "ref_no", nRefNo);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void IsoPosInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "pinpad_id", strPinpadID);
    utils::addJsonValue(jsonObj, "pinpad_uuid", strPinpadUUID);
    utils::addJsonValue(jsonObj, "time", strTime);
    utils::addJsonValue(jsonObj, "pos_type", strPosType);
    utils::addJsonValue(jsonObj, "version", strVersion);
    utils::addJsonValue(jsonObj, "batch_no", nBatchNo);
    utils::addJsonValue(jsonObj, "flow_id", nFlowID);
    utils::addJsonValue(jsonObj, "ref_no", nRefNo);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///LeposParamInfo
////////////////////////////////
LeposParamInfo::LeposParamInfo()
    : bValid(utils::defaultValue<bool>())
{}

LeposParamInfo::LeposParamInfo(const LeposParamInfo& right)
    : strKey(right.strKey)
    , strValue(right.strValue)
    , bValid(right.bValid)
{}

LeposParamInfo& LeposParamInfo::operator=(const LeposParamInfo& right)
{
    strKey = right.strKey;
    strValue = right.strValue;
    bValid = right.bValid;
    return *this;
}

void LeposParamInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "key", strKey);
    utils::getJsonValue(jsonObj, "value", strValue);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void LeposParamInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "key", strKey);
    utils::addJsonValue(jsonObj, "value", strValue);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///BaseStationInfo
////////////////////////////////
BaseStationInfo::BaseStationInfo()
    : bValid(utils::defaultValue<bool>())
{}

BaseStationInfo::BaseStationInfo(const BaseStationInfo& right)
    : strMcc(right.strMcc)
    , strMnc(right.strMnc)
    , strLac(right.strLac)
    , strCi(right.strCi)
    , strLongitude(right.strLongitude)
    , strLatitude(right.strLatitude)
    , bValid(right.bValid)
{}

BaseStationInfo& BaseStationInfo::operator=(const BaseStationInfo& right)
{
    strMcc = right.strMcc;
    strMnc = right.strMnc;
    strLac = right.strLac;
    strCi = right.strCi;
    strLongitude = right.strLongitude;
    strLatitude = right.strLatitude;
    bValid = right.bValid;
    return *this;
}

void BaseStationInfo::fromJson(Json::Value &jsonObj) {
    utils::getJsonValue(jsonObj, "mcc", strMcc);
    utils::getJsonValue(jsonObj, "mnc", strMnc);
    utils::getJsonValue(jsonObj, "lac", strLac);
    utils::getJsonValue(jsonObj, "ci", strCi);
    utils::getJsonValue(jsonObj, "lon", strLongitude);
    utils::getJsonValue(jsonObj, "lat", strLatitude);
    utils::getJsonValue(jsonObj, "bValid", bValid);
}

void BaseStationInfo::toJson(Json::Value &jsonObj) const {
    utils::addJsonValue(jsonObj, "mcc", strMcc);
    utils::addJsonValue(jsonObj, "mnc", strMnc);
    utils::addJsonValue(jsonObj, "lac", strLac);
    utils::addJsonValue(jsonObj, "ci", strCi);
    utils::addJsonValue(jsonObj, "lon", strLongitude);
    utils::addJsonValue(jsonObj, "lat", strLatitude);
    utils::addJsonValue(jsonObj, "bValid", bValid);
}

//////////////////////////////
///Pos2DeductRegular
////////////////////////////////
Pos2DeductRegular::Pos2DeductRegular()
    : nStatus(utils::defaultValue<int>())
    , say_hello(req(> (resq:#s))
{}

Pos2DeductRegular::Pos2DeductRegular(const Pos2DeductRegular& right)
    : strRegularNo(right.strRegularNo)
    , strRegularName(right.strRegularName)
    , strRegular(right.strRegular)
    , nStatus(right.nStatus)
    , strTime(right.strTime)
    , say_hello(req(right.say_hello(req)
    , say_hi(name(right.say_hi(name)
{}

Pos2DeductRegular& Pos2DeductRegular::operator=(const Pos2DeductRegular& right)
{
    strRegularNo = right.strRegularNo;
    strRegularName = right.strRegularName;
    strRegular = right.strRegular;
    nStatus = right.nStatus;
    strTime = right.strTime;
    say_hello(req = right.say_hello(req;
    say_hi(name = right.say_hi(name;
    return *this;
}

}//db_agent_api
